---
description: 
globs: 
alwaysApply: true
---
# API网关系统架构与实现

## 1. 系统概述
设计一个Node.js/NestJS构建的API网关，支持以下功能：
- 请求验证、转发与计费
- 用户、API密钥和余额管理
- 流式请求(SSE)支持
- 可水平扩展的架构

## 2. 技术选型
- 后端：NestJS (选择Fastify适配器可提升性能)
- 前端：Vite + React
- 数据库：
  - MySQL：结构化数据(用户、密钥、账单)
  - Redis：缓存和临时数据
  - MongoDB：请求日志存储
- 部署：Nginx/Docker多实例

## 3. 核心架构组件
- 认证中间件：验证API密钥
- 代理服务：转发和处理请求
- 计费系统：异步、高可靠计费
- 日志服务：记录请求和响应
- 缓存策略：多级缓存优化性能

## 4. 数据流与处理步骤
1. 接收请求并验证API密钥(Redis优先，回退到MySQL)
2. 检查用户配额与余额(非阻塞验证)
3. 根据需要转换请求格式
4. 转发到上游服务
5. 处理响应(包括流式响应)
6. 异步记录计费与日志

## 5. 高级功能
- 限流：基于Redis实现速率限制
- 追踪：每个请求分配唯一traceId
- 上游监控：统计上游服务性能和可用性
- 缓存策略：支持stale-while-revalidate模式
- 事件驱动：使用事件处理非核心流程

## 6. 性能优化与可靠性
- SSE专用节点处理长连接
- 使用连接池优化数据库访问
- 异步处理计费和日志减少延迟
- 数据库事务确保关键操作原子性
- 定期对账确保计费准确性

## 7. Web3集成可能性(未来)

## 8. 开发建议
- 单仓库管理前后端代码
- 渐进式实现核心功能再扩展
- 先使用NestJS原生事件系统后续再考虑消息队列
- 使用Prisma而非TypeORM提高开发效率
- 开源计费模块增加透明度并获得社区贡献

## 9. 扩展路径
- 初期使用模块化单体架构
- 需要时引入消息队列(如BullMQ)处理异步任务
- 根据负载情况优化数据库架构
- 适时添加监控和告警系统