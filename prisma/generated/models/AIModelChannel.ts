
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AIModelChannel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AIModelChannel
 * 
 */
export type AIModelChannelModel = runtime.Types.Result.DefaultSelection<Prisma.$AIModelChannelPayload>

export type AggregateAIModelChannel = {
  _count: AIModelChannelCountAggregateOutputType | null
  _avg: AIModelChannelAvgAggregateOutputType | null
  _sum: AIModelChannelSumAggregateOutputType | null
  _min: AIModelChannelMinAggregateOutputType | null
  _max: AIModelChannelMaxAggregateOutputType | null
}

export type AIModelChannelAvgAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type AIModelChannelSumAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type AIModelChannelMinAggregateOutputType = {
  id: number | null
  name: string | null
  weight: number | null
  baseUrl: string | null
  apiKey: string | null
  createdAt: Date | null
}

export type AIModelChannelMaxAggregateOutputType = {
  id: number | null
  name: string | null
  weight: number | null
  baseUrl: string | null
  apiKey: string | null
  createdAt: Date | null
}

export type AIModelChannelCountAggregateOutputType = {
  id: number
  name: number
  weight: number
  baseUrl: number
  apiKey: number
  createdAt: number
  _all: number
}


export type AIModelChannelAvgAggregateInputType = {
  id?: true
  weight?: true
}

export type AIModelChannelSumAggregateInputType = {
  id?: true
  weight?: true
}

export type AIModelChannelMinAggregateInputType = {
  id?: true
  name?: true
  weight?: true
  baseUrl?: true
  apiKey?: true
  createdAt?: true
}

export type AIModelChannelMaxAggregateInputType = {
  id?: true
  name?: true
  weight?: true
  baseUrl?: true
  apiKey?: true
  createdAt?: true
}

export type AIModelChannelCountAggregateInputType = {
  id?: true
  name?: true
  weight?: true
  baseUrl?: true
  apiKey?: true
  createdAt?: true
  _all?: true
}

export type AIModelChannelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AIModelChannel to aggregate.
   */
  where?: Prisma.AIModelChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AIModelChannels to fetch.
   */
  orderBy?: Prisma.AIModelChannelOrderByWithRelationInput | Prisma.AIModelChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AIModelChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AIModelChannels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AIModelChannels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AIModelChannels
  **/
  _count?: true | AIModelChannelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AIModelChannelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AIModelChannelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AIModelChannelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AIModelChannelMaxAggregateInputType
}

export type GetAIModelChannelAggregateType<T extends AIModelChannelAggregateArgs> = {
      [P in keyof T & keyof AggregateAIModelChannel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAIModelChannel[P]>
    : Prisma.GetScalarType<T[P], AggregateAIModelChannel[P]>
}




export type AIModelChannelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AIModelChannelWhereInput
  orderBy?: Prisma.AIModelChannelOrderByWithAggregationInput | Prisma.AIModelChannelOrderByWithAggregationInput[]
  by: Prisma.AIModelChannelScalarFieldEnum[] | Prisma.AIModelChannelScalarFieldEnum
  having?: Prisma.AIModelChannelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AIModelChannelCountAggregateInputType | true
  _avg?: AIModelChannelAvgAggregateInputType
  _sum?: AIModelChannelSumAggregateInputType
  _min?: AIModelChannelMinAggregateInputType
  _max?: AIModelChannelMaxAggregateInputType
}

export type AIModelChannelGroupByOutputType = {
  id: number
  name: string
  weight: number
  baseUrl: string
  apiKey: string
  createdAt: Date
  _count: AIModelChannelCountAggregateOutputType | null
  _avg: AIModelChannelAvgAggregateOutputType | null
  _sum: AIModelChannelSumAggregateOutputType | null
  _min: AIModelChannelMinAggregateOutputType | null
  _max: AIModelChannelMaxAggregateOutputType | null
}

type GetAIModelChannelGroupByPayload<T extends AIModelChannelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AIModelChannelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AIModelChannelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AIModelChannelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AIModelChannelGroupByOutputType[P]>
      }
    >
  > 



export type AIModelChannelWhereInput = {
  AND?: Prisma.AIModelChannelWhereInput | Prisma.AIModelChannelWhereInput[]
  OR?: Prisma.AIModelChannelWhereInput[]
  NOT?: Prisma.AIModelChannelWhereInput | Prisma.AIModelChannelWhereInput[]
  id?: Prisma.IntFilter<"AIModelChannel"> | number
  name?: Prisma.StringFilter<"AIModelChannel"> | string
  weight?: Prisma.IntFilter<"AIModelChannel"> | number
  baseUrl?: Prisma.StringFilter<"AIModelChannel"> | string
  apiKey?: Prisma.StringFilter<"AIModelChannel"> | string
  createdAt?: Prisma.DateTimeFilter<"AIModelChannel"> | Date | string
}

export type AIModelChannelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _relevance?: Prisma.AIModelChannelOrderByRelevanceInput
}

export type AIModelChannelWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.AIModelChannelWhereInput | Prisma.AIModelChannelWhereInput[]
  OR?: Prisma.AIModelChannelWhereInput[]
  NOT?: Prisma.AIModelChannelWhereInput | Prisma.AIModelChannelWhereInput[]
  weight?: Prisma.IntFilter<"AIModelChannel"> | number
  baseUrl?: Prisma.StringFilter<"AIModelChannel"> | string
  apiKey?: Prisma.StringFilter<"AIModelChannel"> | string
  createdAt?: Prisma.DateTimeFilter<"AIModelChannel"> | Date | string
}, "id" | "name">

export type AIModelChannelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.AIModelChannelCountOrderByAggregateInput
  _avg?: Prisma.AIModelChannelAvgOrderByAggregateInput
  _max?: Prisma.AIModelChannelMaxOrderByAggregateInput
  _min?: Prisma.AIModelChannelMinOrderByAggregateInput
  _sum?: Prisma.AIModelChannelSumOrderByAggregateInput
}

export type AIModelChannelScalarWhereWithAggregatesInput = {
  AND?: Prisma.AIModelChannelScalarWhereWithAggregatesInput | Prisma.AIModelChannelScalarWhereWithAggregatesInput[]
  OR?: Prisma.AIModelChannelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AIModelChannelScalarWhereWithAggregatesInput | Prisma.AIModelChannelScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"AIModelChannel"> | number
  name?: Prisma.StringWithAggregatesFilter<"AIModelChannel"> | string
  weight?: Prisma.IntWithAggregatesFilter<"AIModelChannel"> | number
  baseUrl?: Prisma.StringWithAggregatesFilter<"AIModelChannel"> | string
  apiKey?: Prisma.StringWithAggregatesFilter<"AIModelChannel"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AIModelChannel"> | Date | string
}

export type AIModelChannelCreateInput = {
  name: string
  weight?: number
  baseUrl: string
  apiKey: string
  createdAt?: Date | string
}

export type AIModelChannelUncheckedCreateInput = {
  id?: number
  name: string
  weight?: number
  baseUrl: string
  apiKey: string
  createdAt?: Date | string
}

export type AIModelChannelUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  baseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AIModelChannelUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  baseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AIModelChannelCreateManyInput = {
  id?: number
  name: string
  weight?: number
  baseUrl: string
  apiKey: string
  createdAt?: Date | string
}

export type AIModelChannelUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  baseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AIModelChannelUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  baseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AIModelChannelOrderByRelevanceInput = {
  fields: Prisma.AIModelChannelOrderByRelevanceFieldEnum | Prisma.AIModelChannelOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type AIModelChannelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AIModelChannelAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type AIModelChannelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AIModelChannelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AIModelChannelSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}



export type AIModelChannelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  weight?: boolean
  baseUrl?: boolean
  apiKey?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["aIModelChannel"]>



export type AIModelChannelSelectScalar = {
  id?: boolean
  name?: boolean
  weight?: boolean
  baseUrl?: boolean
  apiKey?: boolean
  createdAt?: boolean
}

export type AIModelChannelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "weight" | "baseUrl" | "apiKey" | "createdAt", ExtArgs["result"]["aIModelChannel"]>

export type $AIModelChannelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AIModelChannel"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    weight: number
    baseUrl: string
    apiKey: string
    createdAt: Date
  }, ExtArgs["result"]["aIModelChannel"]>
  composites: {}
}

export type AIModelChannelGetPayload<S extends boolean | null | undefined | AIModelChannelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload, S>

export type AIModelChannelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AIModelChannelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AIModelChannelCountAggregateInputType | true
  }

export interface AIModelChannelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIModelChannel'], meta: { name: 'AIModelChannel' } }
  /**
   * Find zero or one AIModelChannel that matches the filter.
   * @param {AIModelChannelFindUniqueArgs} args - Arguments to find a AIModelChannel
   * @example
   * // Get one AIModelChannel
   * const aIModelChannel = await prisma.aIModelChannel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AIModelChannelFindUniqueArgs>(args: Prisma.SelectSubset<T, AIModelChannelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AIModelChannelClient<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AIModelChannel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AIModelChannelFindUniqueOrThrowArgs} args - Arguments to find a AIModelChannel
   * @example
   * // Get one AIModelChannel
   * const aIModelChannel = await prisma.aIModelChannel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AIModelChannelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AIModelChannelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AIModelChannelClient<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AIModelChannel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelChannelFindFirstArgs} args - Arguments to find a AIModelChannel
   * @example
   * // Get one AIModelChannel
   * const aIModelChannel = await prisma.aIModelChannel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AIModelChannelFindFirstArgs>(args?: Prisma.SelectSubset<T, AIModelChannelFindFirstArgs<ExtArgs>>): Prisma.Prisma__AIModelChannelClient<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AIModelChannel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelChannelFindFirstOrThrowArgs} args - Arguments to find a AIModelChannel
   * @example
   * // Get one AIModelChannel
   * const aIModelChannel = await prisma.aIModelChannel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AIModelChannelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AIModelChannelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AIModelChannelClient<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AIModelChannels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelChannelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AIModelChannels
   * const aIModelChannels = await prisma.aIModelChannel.findMany()
   * 
   * // Get first 10 AIModelChannels
   * const aIModelChannels = await prisma.aIModelChannel.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const aIModelChannelWithIdOnly = await prisma.aIModelChannel.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AIModelChannelFindManyArgs>(args?: Prisma.SelectSubset<T, AIModelChannelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AIModelChannel.
   * @param {AIModelChannelCreateArgs} args - Arguments to create a AIModelChannel.
   * @example
   * // Create one AIModelChannel
   * const AIModelChannel = await prisma.aIModelChannel.create({
   *   data: {
   *     // ... data to create a AIModelChannel
   *   }
   * })
   * 
   */
  create<T extends AIModelChannelCreateArgs>(args: Prisma.SelectSubset<T, AIModelChannelCreateArgs<ExtArgs>>): Prisma.Prisma__AIModelChannelClient<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AIModelChannels.
   * @param {AIModelChannelCreateManyArgs} args - Arguments to create many AIModelChannels.
   * @example
   * // Create many AIModelChannels
   * const aIModelChannel = await prisma.aIModelChannel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AIModelChannelCreateManyArgs>(args?: Prisma.SelectSubset<T, AIModelChannelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a AIModelChannel.
   * @param {AIModelChannelDeleteArgs} args - Arguments to delete one AIModelChannel.
   * @example
   * // Delete one AIModelChannel
   * const AIModelChannel = await prisma.aIModelChannel.delete({
   *   where: {
   *     // ... filter to delete one AIModelChannel
   *   }
   * })
   * 
   */
  delete<T extends AIModelChannelDeleteArgs>(args: Prisma.SelectSubset<T, AIModelChannelDeleteArgs<ExtArgs>>): Prisma.Prisma__AIModelChannelClient<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AIModelChannel.
   * @param {AIModelChannelUpdateArgs} args - Arguments to update one AIModelChannel.
   * @example
   * // Update one AIModelChannel
   * const aIModelChannel = await prisma.aIModelChannel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AIModelChannelUpdateArgs>(args: Prisma.SelectSubset<T, AIModelChannelUpdateArgs<ExtArgs>>): Prisma.Prisma__AIModelChannelClient<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AIModelChannels.
   * @param {AIModelChannelDeleteManyArgs} args - Arguments to filter AIModelChannels to delete.
   * @example
   * // Delete a few AIModelChannels
   * const { count } = await prisma.aIModelChannel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AIModelChannelDeleteManyArgs>(args?: Prisma.SelectSubset<T, AIModelChannelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AIModelChannels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelChannelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AIModelChannels
   * const aIModelChannel = await prisma.aIModelChannel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AIModelChannelUpdateManyArgs>(args: Prisma.SelectSubset<T, AIModelChannelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one AIModelChannel.
   * @param {AIModelChannelUpsertArgs} args - Arguments to update or create a AIModelChannel.
   * @example
   * // Update or create a AIModelChannel
   * const aIModelChannel = await prisma.aIModelChannel.upsert({
   *   create: {
   *     // ... data to create a AIModelChannel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AIModelChannel we want to update
   *   }
   * })
   */
  upsert<T extends AIModelChannelUpsertArgs>(args: Prisma.SelectSubset<T, AIModelChannelUpsertArgs<ExtArgs>>): Prisma.Prisma__AIModelChannelClient<runtime.Types.Result.GetResult<Prisma.$AIModelChannelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AIModelChannels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelChannelCountArgs} args - Arguments to filter AIModelChannels to count.
   * @example
   * // Count the number of AIModelChannels
   * const count = await prisma.aIModelChannel.count({
   *   where: {
   *     // ... the filter for the AIModelChannels we want to count
   *   }
   * })
  **/
  count<T extends AIModelChannelCountArgs>(
    args?: Prisma.Subset<T, AIModelChannelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AIModelChannelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AIModelChannel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AIModelChannelAggregateArgs>(args: Prisma.Subset<T, AIModelChannelAggregateArgs>): Prisma.PrismaPromise<GetAIModelChannelAggregateType<T>>

  /**
   * Group by AIModelChannel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelChannelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AIModelChannelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AIModelChannelGroupByArgs['orderBy'] }
      : { orderBy?: AIModelChannelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AIModelChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIModelChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AIModelChannel model
 */
readonly fields: AIModelChannelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AIModelChannel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AIModelChannelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AIModelChannel model
 */
export interface AIModelChannelFieldRefs {
  readonly id: Prisma.FieldRef<"AIModelChannel", 'Int'>
  readonly name: Prisma.FieldRef<"AIModelChannel", 'String'>
  readonly weight: Prisma.FieldRef<"AIModelChannel", 'Int'>
  readonly baseUrl: Prisma.FieldRef<"AIModelChannel", 'String'>
  readonly apiKey: Prisma.FieldRef<"AIModelChannel", 'String'>
  readonly createdAt: Prisma.FieldRef<"AIModelChannel", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AIModelChannel findUnique
 */
export type AIModelChannelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * Filter, which AIModelChannel to fetch.
   */
  where: Prisma.AIModelChannelWhereUniqueInput
}

/**
 * AIModelChannel findUniqueOrThrow
 */
export type AIModelChannelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * Filter, which AIModelChannel to fetch.
   */
  where: Prisma.AIModelChannelWhereUniqueInput
}

/**
 * AIModelChannel findFirst
 */
export type AIModelChannelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * Filter, which AIModelChannel to fetch.
   */
  where?: Prisma.AIModelChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AIModelChannels to fetch.
   */
  orderBy?: Prisma.AIModelChannelOrderByWithRelationInput | Prisma.AIModelChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AIModelChannels.
   */
  cursor?: Prisma.AIModelChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AIModelChannels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AIModelChannels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AIModelChannels.
   */
  distinct?: Prisma.AIModelChannelScalarFieldEnum | Prisma.AIModelChannelScalarFieldEnum[]
}

/**
 * AIModelChannel findFirstOrThrow
 */
export type AIModelChannelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * Filter, which AIModelChannel to fetch.
   */
  where?: Prisma.AIModelChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AIModelChannels to fetch.
   */
  orderBy?: Prisma.AIModelChannelOrderByWithRelationInput | Prisma.AIModelChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AIModelChannels.
   */
  cursor?: Prisma.AIModelChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AIModelChannels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AIModelChannels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AIModelChannels.
   */
  distinct?: Prisma.AIModelChannelScalarFieldEnum | Prisma.AIModelChannelScalarFieldEnum[]
}

/**
 * AIModelChannel findMany
 */
export type AIModelChannelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * Filter, which AIModelChannels to fetch.
   */
  where?: Prisma.AIModelChannelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AIModelChannels to fetch.
   */
  orderBy?: Prisma.AIModelChannelOrderByWithRelationInput | Prisma.AIModelChannelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AIModelChannels.
   */
  cursor?: Prisma.AIModelChannelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AIModelChannels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AIModelChannels.
   */
  skip?: number
  distinct?: Prisma.AIModelChannelScalarFieldEnum | Prisma.AIModelChannelScalarFieldEnum[]
}

/**
 * AIModelChannel create
 */
export type AIModelChannelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * The data needed to create a AIModelChannel.
   */
  data: Prisma.XOR<Prisma.AIModelChannelCreateInput, Prisma.AIModelChannelUncheckedCreateInput>
}

/**
 * AIModelChannel createMany
 */
export type AIModelChannelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AIModelChannels.
   */
  data: Prisma.AIModelChannelCreateManyInput | Prisma.AIModelChannelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AIModelChannel update
 */
export type AIModelChannelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * The data needed to update a AIModelChannel.
   */
  data: Prisma.XOR<Prisma.AIModelChannelUpdateInput, Prisma.AIModelChannelUncheckedUpdateInput>
  /**
   * Choose, which AIModelChannel to update.
   */
  where: Prisma.AIModelChannelWhereUniqueInput
}

/**
 * AIModelChannel updateMany
 */
export type AIModelChannelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AIModelChannels.
   */
  data: Prisma.XOR<Prisma.AIModelChannelUpdateManyMutationInput, Prisma.AIModelChannelUncheckedUpdateManyInput>
  /**
   * Filter which AIModelChannels to update
   */
  where?: Prisma.AIModelChannelWhereInput
  /**
   * Limit how many AIModelChannels to update.
   */
  limit?: number
}

/**
 * AIModelChannel upsert
 */
export type AIModelChannelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * The filter to search for the AIModelChannel to update in case it exists.
   */
  where: Prisma.AIModelChannelWhereUniqueInput
  /**
   * In case the AIModelChannel found by the `where` argument doesn't exist, create a new AIModelChannel with this data.
   */
  create: Prisma.XOR<Prisma.AIModelChannelCreateInput, Prisma.AIModelChannelUncheckedCreateInput>
  /**
   * In case the AIModelChannel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AIModelChannelUpdateInput, Prisma.AIModelChannelUncheckedUpdateInput>
}

/**
 * AIModelChannel delete
 */
export type AIModelChannelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
  /**
   * Filter which AIModelChannel to delete.
   */
  where: Prisma.AIModelChannelWhereUniqueInput
}

/**
 * AIModelChannel deleteMany
 */
export type AIModelChannelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AIModelChannels to delete
   */
  where?: Prisma.AIModelChannelWhereInput
  /**
   * Limit how many AIModelChannels to delete.
   */
  limit?: number
}

/**
 * AIModelChannel without action
 */
export type AIModelChannelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModelChannel
   */
  select?: Prisma.AIModelChannelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModelChannel
   */
  omit?: Prisma.AIModelChannelOmit<ExtArgs> | null
}
