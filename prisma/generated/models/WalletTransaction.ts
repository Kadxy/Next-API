
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WalletTransaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WalletTransaction
 * 
 */
export type WalletTransactionModel = runtime.Types.Result.DefaultSelection<Prisma.$WalletTransactionPayload>

export type AggregateWalletTransaction = {
  _count: WalletTransactionCountAggregateOutputType | null
  _avg: WalletTransactionAvgAggregateOutputType | null
  _sum: WalletTransactionSumAggregateOutputType | null
  _min: WalletTransactionMinAggregateOutputType | null
  _max: WalletTransactionMaxAggregateOutputType | null
}

export type WalletTransactionAvgAggregateOutputType = {
  id: number | null
  walletId: number | null
  amount: runtime.Decimal | null
}

export type WalletTransactionSumAggregateOutputType = {
  id: number | null
  walletId: number | null
  amount: runtime.Decimal | null
}

export type WalletTransactionMinAggregateOutputType = {
  id: number | null
  uid: string | null
  walletId: number | null
  amount: runtime.Decimal | null
  type: $Enums.TransactionType | null
  status: $Enums.TransactionStatus | null
  description: string | null
  sourceId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WalletTransactionMaxAggregateOutputType = {
  id: number | null
  uid: string | null
  walletId: number | null
  amount: runtime.Decimal | null
  type: $Enums.TransactionType | null
  status: $Enums.TransactionStatus | null
  description: string | null
  sourceId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WalletTransactionCountAggregateOutputType = {
  id: number
  uid: number
  walletId: number
  amount: number
  type: number
  status: number
  description: number
  sourceId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WalletTransactionAvgAggregateInputType = {
  id?: true
  walletId?: true
  amount?: true
}

export type WalletTransactionSumAggregateInputType = {
  id?: true
  walletId?: true
  amount?: true
}

export type WalletTransactionMinAggregateInputType = {
  id?: true
  uid?: true
  walletId?: true
  amount?: true
  type?: true
  status?: true
  description?: true
  sourceId?: true
  createdAt?: true
  updatedAt?: true
}

export type WalletTransactionMaxAggregateInputType = {
  id?: true
  uid?: true
  walletId?: true
  amount?: true
  type?: true
  status?: true
  description?: true
  sourceId?: true
  createdAt?: true
  updatedAt?: true
}

export type WalletTransactionCountAggregateInputType = {
  id?: true
  uid?: true
  walletId?: true
  amount?: true
  type?: true
  status?: true
  description?: true
  sourceId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WalletTransactionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WalletTransaction to aggregate.
   */
  where?: Prisma.WalletTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletTransactions to fetch.
   */
  orderBy?: Prisma.WalletTransactionOrderByWithRelationInput | Prisma.WalletTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WalletTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WalletTransactions
  **/
  _count?: true | WalletTransactionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WalletTransactionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WalletTransactionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WalletTransactionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WalletTransactionMaxAggregateInputType
}

export type GetWalletTransactionAggregateType<T extends WalletTransactionAggregateArgs> = {
      [P in keyof T & keyof AggregateWalletTransaction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWalletTransaction[P]>
    : Prisma.GetScalarType<T[P], AggregateWalletTransaction[P]>
}




export type WalletTransactionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WalletTransactionWhereInput
  orderBy?: Prisma.WalletTransactionOrderByWithAggregationInput | Prisma.WalletTransactionOrderByWithAggregationInput[]
  by: Prisma.WalletTransactionScalarFieldEnum[] | Prisma.WalletTransactionScalarFieldEnum
  having?: Prisma.WalletTransactionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WalletTransactionCountAggregateInputType | true
  _avg?: WalletTransactionAvgAggregateInputType
  _sum?: WalletTransactionSumAggregateInputType
  _min?: WalletTransactionMinAggregateInputType
  _max?: WalletTransactionMaxAggregateInputType
}

export type WalletTransactionGroupByOutputType = {
  id: number
  uid: string
  walletId: number
  amount: runtime.Decimal
  type: $Enums.TransactionType
  status: $Enums.TransactionStatus
  description: string
  sourceId: string
  createdAt: Date
  updatedAt: Date
  _count: WalletTransactionCountAggregateOutputType | null
  _avg: WalletTransactionAvgAggregateOutputType | null
  _sum: WalletTransactionSumAggregateOutputType | null
  _min: WalletTransactionMinAggregateOutputType | null
  _max: WalletTransactionMaxAggregateOutputType | null
}

type GetWalletTransactionGroupByPayload<T extends WalletTransactionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WalletTransactionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WalletTransactionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WalletTransactionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WalletTransactionGroupByOutputType[P]>
      }
    >
  > 



export type WalletTransactionWhereInput = {
  AND?: Prisma.WalletTransactionWhereInput | Prisma.WalletTransactionWhereInput[]
  OR?: Prisma.WalletTransactionWhereInput[]
  NOT?: Prisma.WalletTransactionWhereInput | Prisma.WalletTransactionWhereInput[]
  id?: Prisma.IntFilter<"WalletTransaction"> | number
  uid?: Prisma.StringFilter<"WalletTransaction"> | string
  walletId?: Prisma.IntFilter<"WalletTransaction"> | number
  amount?: Prisma.DecimalFilter<"WalletTransaction"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFilter<"WalletTransaction"> | $Enums.TransactionStatus
  description?: Prisma.StringFilter<"WalletTransaction"> | string
  sourceId?: Prisma.StringFilter<"WalletTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"WalletTransaction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletTransaction"> | Date | string
  wallet?: Prisma.XOR<Prisma.WalletScalarRelationFilter, Prisma.WalletWhereInput>
}

export type WalletTransactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sourceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  wallet?: Prisma.WalletOrderByWithRelationInput
  _relevance?: Prisma.WalletTransactionOrderByRelevanceInput
}

export type WalletTransactionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  uid?: string
  sourceId?: string
  AND?: Prisma.WalletTransactionWhereInput | Prisma.WalletTransactionWhereInput[]
  OR?: Prisma.WalletTransactionWhereInput[]
  NOT?: Prisma.WalletTransactionWhereInput | Prisma.WalletTransactionWhereInput[]
  walletId?: Prisma.IntFilter<"WalletTransaction"> | number
  amount?: Prisma.DecimalFilter<"WalletTransaction"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFilter<"WalletTransaction"> | $Enums.TransactionStatus
  description?: Prisma.StringFilter<"WalletTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"WalletTransaction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletTransaction"> | Date | string
  wallet?: Prisma.XOR<Prisma.WalletScalarRelationFilter, Prisma.WalletWhereInput>
}, "id" | "uid" | "sourceId">

export type WalletTransactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sourceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WalletTransactionCountOrderByAggregateInput
  _avg?: Prisma.WalletTransactionAvgOrderByAggregateInput
  _max?: Prisma.WalletTransactionMaxOrderByAggregateInput
  _min?: Prisma.WalletTransactionMinOrderByAggregateInput
  _sum?: Prisma.WalletTransactionSumOrderByAggregateInput
}

export type WalletTransactionScalarWhereWithAggregatesInput = {
  AND?: Prisma.WalletTransactionScalarWhereWithAggregatesInput | Prisma.WalletTransactionScalarWhereWithAggregatesInput[]
  OR?: Prisma.WalletTransactionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WalletTransactionScalarWhereWithAggregatesInput | Prisma.WalletTransactionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WalletTransaction"> | number
  uid?: Prisma.StringWithAggregatesFilter<"WalletTransaction"> | string
  walletId?: Prisma.IntWithAggregatesFilter<"WalletTransaction"> | number
  amount?: Prisma.DecimalWithAggregatesFilter<"WalletTransaction"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeWithAggregatesFilter<"WalletTransaction"> | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusWithAggregatesFilter<"WalletTransaction"> | $Enums.TransactionStatus
  description?: Prisma.StringWithAggregatesFilter<"WalletTransaction"> | string
  sourceId?: Prisma.StringWithAggregatesFilter<"WalletTransaction"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WalletTransaction"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WalletTransaction"> | Date | string
}

export type WalletTransactionCreateInput = {
  uid: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  type: $Enums.TransactionType
  status?: $Enums.TransactionStatus
  description: string
  sourceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  wallet: Prisma.WalletCreateNestedOneWithoutWalletTransactionInput
}

export type WalletTransactionUncheckedCreateInput = {
  id?: number
  uid: string
  walletId: number
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  type: $Enums.TransactionType
  status?: $Enums.TransactionStatus
  description: string
  sourceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransactionUpdateInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sourceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  wallet?: Prisma.WalletUpdateOneRequiredWithoutWalletTransactionNestedInput
}

export type WalletTransactionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.StringFieldUpdateOperationsInput | string
  walletId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sourceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransactionCreateManyInput = {
  id?: number
  uid: string
  walletId: number
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  type: $Enums.TransactionType
  status?: $Enums.TransactionStatus
  description: string
  sourceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransactionUpdateManyMutationInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sourceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransactionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.StringFieldUpdateOperationsInput | string
  walletId?: Prisma.IntFieldUpdateOperationsInput | number
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sourceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransactionListRelationFilter = {
  every?: Prisma.WalletTransactionWhereInput
  some?: Prisma.WalletTransactionWhereInput
  none?: Prisma.WalletTransactionWhereInput
}

export type WalletTransactionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WalletTransactionOrderByRelevanceInput = {
  fields: Prisma.WalletTransactionOrderByRelevanceFieldEnum | Prisma.WalletTransactionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type WalletTransactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sourceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletTransactionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
}

export type WalletTransactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sourceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletTransactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  description?: Prisma.SortOrder
  sourceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletTransactionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
}

export type WalletTransactionCreateNestedManyWithoutWalletInput = {
  create?: Prisma.XOR<Prisma.WalletTransactionCreateWithoutWalletInput, Prisma.WalletTransactionUncheckedCreateWithoutWalletInput> | Prisma.WalletTransactionCreateWithoutWalletInput[] | Prisma.WalletTransactionUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.WalletTransactionCreateOrConnectWithoutWalletInput | Prisma.WalletTransactionCreateOrConnectWithoutWalletInput[]
  createMany?: Prisma.WalletTransactionCreateManyWalletInputEnvelope
  connect?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
}

export type WalletTransactionUncheckedCreateNestedManyWithoutWalletInput = {
  create?: Prisma.XOR<Prisma.WalletTransactionCreateWithoutWalletInput, Prisma.WalletTransactionUncheckedCreateWithoutWalletInput> | Prisma.WalletTransactionCreateWithoutWalletInput[] | Prisma.WalletTransactionUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.WalletTransactionCreateOrConnectWithoutWalletInput | Prisma.WalletTransactionCreateOrConnectWithoutWalletInput[]
  createMany?: Prisma.WalletTransactionCreateManyWalletInputEnvelope
  connect?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
}

export type WalletTransactionUpdateManyWithoutWalletNestedInput = {
  create?: Prisma.XOR<Prisma.WalletTransactionCreateWithoutWalletInput, Prisma.WalletTransactionUncheckedCreateWithoutWalletInput> | Prisma.WalletTransactionCreateWithoutWalletInput[] | Prisma.WalletTransactionUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.WalletTransactionCreateOrConnectWithoutWalletInput | Prisma.WalletTransactionCreateOrConnectWithoutWalletInput[]
  upsert?: Prisma.WalletTransactionUpsertWithWhereUniqueWithoutWalletInput | Prisma.WalletTransactionUpsertWithWhereUniqueWithoutWalletInput[]
  createMany?: Prisma.WalletTransactionCreateManyWalletInputEnvelope
  set?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
  disconnect?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
  delete?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
  connect?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
  update?: Prisma.WalletTransactionUpdateWithWhereUniqueWithoutWalletInput | Prisma.WalletTransactionUpdateWithWhereUniqueWithoutWalletInput[]
  updateMany?: Prisma.WalletTransactionUpdateManyWithWhereWithoutWalletInput | Prisma.WalletTransactionUpdateManyWithWhereWithoutWalletInput[]
  deleteMany?: Prisma.WalletTransactionScalarWhereInput | Prisma.WalletTransactionScalarWhereInput[]
}

export type WalletTransactionUncheckedUpdateManyWithoutWalletNestedInput = {
  create?: Prisma.XOR<Prisma.WalletTransactionCreateWithoutWalletInput, Prisma.WalletTransactionUncheckedCreateWithoutWalletInput> | Prisma.WalletTransactionCreateWithoutWalletInput[] | Prisma.WalletTransactionUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.WalletTransactionCreateOrConnectWithoutWalletInput | Prisma.WalletTransactionCreateOrConnectWithoutWalletInput[]
  upsert?: Prisma.WalletTransactionUpsertWithWhereUniqueWithoutWalletInput | Prisma.WalletTransactionUpsertWithWhereUniqueWithoutWalletInput[]
  createMany?: Prisma.WalletTransactionCreateManyWalletInputEnvelope
  set?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
  disconnect?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
  delete?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
  connect?: Prisma.WalletTransactionWhereUniqueInput | Prisma.WalletTransactionWhereUniqueInput[]
  update?: Prisma.WalletTransactionUpdateWithWhereUniqueWithoutWalletInput | Prisma.WalletTransactionUpdateWithWhereUniqueWithoutWalletInput[]
  updateMany?: Prisma.WalletTransactionUpdateManyWithWhereWithoutWalletInput | Prisma.WalletTransactionUpdateManyWithWhereWithoutWalletInput[]
  deleteMany?: Prisma.WalletTransactionScalarWhereInput | Prisma.WalletTransactionScalarWhereInput[]
}

export type EnumTransactionTypeFieldUpdateOperationsInput = {
  set?: $Enums.TransactionType
}

export type EnumTransactionStatusFieldUpdateOperationsInput = {
  set?: $Enums.TransactionStatus
}

export type WalletTransactionCreateWithoutWalletInput = {
  uid: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  type: $Enums.TransactionType
  status?: $Enums.TransactionStatus
  description: string
  sourceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransactionUncheckedCreateWithoutWalletInput = {
  id?: number
  uid: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  type: $Enums.TransactionType
  status?: $Enums.TransactionStatus
  description: string
  sourceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransactionCreateOrConnectWithoutWalletInput = {
  where: Prisma.WalletTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.WalletTransactionCreateWithoutWalletInput, Prisma.WalletTransactionUncheckedCreateWithoutWalletInput>
}

export type WalletTransactionCreateManyWalletInputEnvelope = {
  data: Prisma.WalletTransactionCreateManyWalletInput | Prisma.WalletTransactionCreateManyWalletInput[]
  skipDuplicates?: boolean
}

export type WalletTransactionUpsertWithWhereUniqueWithoutWalletInput = {
  where: Prisma.WalletTransactionWhereUniqueInput
  update: Prisma.XOR<Prisma.WalletTransactionUpdateWithoutWalletInput, Prisma.WalletTransactionUncheckedUpdateWithoutWalletInput>
  create: Prisma.XOR<Prisma.WalletTransactionCreateWithoutWalletInput, Prisma.WalletTransactionUncheckedCreateWithoutWalletInput>
}

export type WalletTransactionUpdateWithWhereUniqueWithoutWalletInput = {
  where: Prisma.WalletTransactionWhereUniqueInput
  data: Prisma.XOR<Prisma.WalletTransactionUpdateWithoutWalletInput, Prisma.WalletTransactionUncheckedUpdateWithoutWalletInput>
}

export type WalletTransactionUpdateManyWithWhereWithoutWalletInput = {
  where: Prisma.WalletTransactionScalarWhereInput
  data: Prisma.XOR<Prisma.WalletTransactionUpdateManyMutationInput, Prisma.WalletTransactionUncheckedUpdateManyWithoutWalletInput>
}

export type WalletTransactionScalarWhereInput = {
  AND?: Prisma.WalletTransactionScalarWhereInput | Prisma.WalletTransactionScalarWhereInput[]
  OR?: Prisma.WalletTransactionScalarWhereInput[]
  NOT?: Prisma.WalletTransactionScalarWhereInput | Prisma.WalletTransactionScalarWhereInput[]
  id?: Prisma.IntFilter<"WalletTransaction"> | number
  uid?: Prisma.StringFilter<"WalletTransaction"> | string
  walletId?: Prisma.IntFilter<"WalletTransaction"> | number
  amount?: Prisma.DecimalFilter<"WalletTransaction"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFilter<"WalletTransaction"> | $Enums.TransactionStatus
  description?: Prisma.StringFilter<"WalletTransaction"> | string
  sourceId?: Prisma.StringFilter<"WalletTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"WalletTransaction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletTransaction"> | Date | string
}

export type WalletTransactionCreateManyWalletInput = {
  id?: number
  uid: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  type: $Enums.TransactionType
  status?: $Enums.TransactionStatus
  description: string
  sourceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletTransactionUpdateWithoutWalletInput = {
  uid?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sourceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransactionUncheckedUpdateWithoutWalletInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sourceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletTransactionUncheckedUpdateManyWithoutWalletInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  type?: Prisma.EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
  status?: Prisma.EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
  description?: Prisma.StringFieldUpdateOperationsInput | string
  sourceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WalletTransactionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  uid?: boolean
  walletId?: boolean
  amount?: boolean
  type?: boolean
  status?: boolean
  description?: boolean
  sourceId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walletTransaction"]>



export type WalletTransactionSelectScalar = {
  id?: boolean
  uid?: boolean
  walletId?: boolean
  amount?: boolean
  type?: boolean
  status?: boolean
  description?: boolean
  sourceId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WalletTransactionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "uid" | "walletId" | "amount" | "type" | "status" | "description" | "sourceId" | "createdAt" | "updatedAt", ExtArgs["result"]["walletTransaction"]>
export type WalletTransactionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
}

export type $WalletTransactionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WalletTransaction"
  objects: {
    wallet: Prisma.$WalletPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    uid: string
    walletId: number
    amount: runtime.Decimal
    type: $Enums.TransactionType
    status: $Enums.TransactionStatus
    description: string
    sourceId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["walletTransaction"]>
  composites: {}
}

export type WalletTransactionGetPayload<S extends boolean | null | undefined | WalletTransactionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload, S>

export type WalletTransactionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WalletTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WalletTransactionCountAggregateInputType | true
  }

export interface WalletTransactionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletTransaction'], meta: { name: 'WalletTransaction' } }
  /**
   * Find zero or one WalletTransaction that matches the filter.
   * @param {WalletTransactionFindUniqueArgs} args - Arguments to find a WalletTransaction
   * @example
   * // Get one WalletTransaction
   * const walletTransaction = await prisma.walletTransaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WalletTransactionFindUniqueArgs>(args: Prisma.SelectSubset<T, WalletTransactionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WalletTransactionClient<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WalletTransaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WalletTransactionFindUniqueOrThrowArgs} args - Arguments to find a WalletTransaction
   * @example
   * // Get one WalletTransaction
   * const walletTransaction = await prisma.walletTransaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WalletTransactionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WalletTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WalletTransactionClient<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WalletTransaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransactionFindFirstArgs} args - Arguments to find a WalletTransaction
   * @example
   * // Get one WalletTransaction
   * const walletTransaction = await prisma.walletTransaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WalletTransactionFindFirstArgs>(args?: Prisma.SelectSubset<T, WalletTransactionFindFirstArgs<ExtArgs>>): Prisma.Prisma__WalletTransactionClient<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WalletTransaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransactionFindFirstOrThrowArgs} args - Arguments to find a WalletTransaction
   * @example
   * // Get one WalletTransaction
   * const walletTransaction = await prisma.walletTransaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WalletTransactionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WalletTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WalletTransactionClient<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WalletTransactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WalletTransactions
   * const walletTransactions = await prisma.walletTransaction.findMany()
   * 
   * // Get first 10 WalletTransactions
   * const walletTransactions = await prisma.walletTransaction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const walletTransactionWithIdOnly = await prisma.walletTransaction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WalletTransactionFindManyArgs>(args?: Prisma.SelectSubset<T, WalletTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WalletTransaction.
   * @param {WalletTransactionCreateArgs} args - Arguments to create a WalletTransaction.
   * @example
   * // Create one WalletTransaction
   * const WalletTransaction = await prisma.walletTransaction.create({
   *   data: {
   *     // ... data to create a WalletTransaction
   *   }
   * })
   * 
   */
  create<T extends WalletTransactionCreateArgs>(args: Prisma.SelectSubset<T, WalletTransactionCreateArgs<ExtArgs>>): Prisma.Prisma__WalletTransactionClient<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WalletTransactions.
   * @param {WalletTransactionCreateManyArgs} args - Arguments to create many WalletTransactions.
   * @example
   * // Create many WalletTransactions
   * const walletTransaction = await prisma.walletTransaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WalletTransactionCreateManyArgs>(args?: Prisma.SelectSubset<T, WalletTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a WalletTransaction.
   * @param {WalletTransactionDeleteArgs} args - Arguments to delete one WalletTransaction.
   * @example
   * // Delete one WalletTransaction
   * const WalletTransaction = await prisma.walletTransaction.delete({
   *   where: {
   *     // ... filter to delete one WalletTransaction
   *   }
   * })
   * 
   */
  delete<T extends WalletTransactionDeleteArgs>(args: Prisma.SelectSubset<T, WalletTransactionDeleteArgs<ExtArgs>>): Prisma.Prisma__WalletTransactionClient<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WalletTransaction.
   * @param {WalletTransactionUpdateArgs} args - Arguments to update one WalletTransaction.
   * @example
   * // Update one WalletTransaction
   * const walletTransaction = await prisma.walletTransaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WalletTransactionUpdateArgs>(args: Prisma.SelectSubset<T, WalletTransactionUpdateArgs<ExtArgs>>): Prisma.Prisma__WalletTransactionClient<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WalletTransactions.
   * @param {WalletTransactionDeleteManyArgs} args - Arguments to filter WalletTransactions to delete.
   * @example
   * // Delete a few WalletTransactions
   * const { count } = await prisma.walletTransaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WalletTransactionDeleteManyArgs>(args?: Prisma.SelectSubset<T, WalletTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WalletTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WalletTransactions
   * const walletTransaction = await prisma.walletTransaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WalletTransactionUpdateManyArgs>(args: Prisma.SelectSubset<T, WalletTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one WalletTransaction.
   * @param {WalletTransactionUpsertArgs} args - Arguments to update or create a WalletTransaction.
   * @example
   * // Update or create a WalletTransaction
   * const walletTransaction = await prisma.walletTransaction.upsert({
   *   create: {
   *     // ... data to create a WalletTransaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WalletTransaction we want to update
   *   }
   * })
   */
  upsert<T extends WalletTransactionUpsertArgs>(args: Prisma.SelectSubset<T, WalletTransactionUpsertArgs<ExtArgs>>): Prisma.Prisma__WalletTransactionClient<runtime.Types.Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WalletTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransactionCountArgs} args - Arguments to filter WalletTransactions to count.
   * @example
   * // Count the number of WalletTransactions
   * const count = await prisma.walletTransaction.count({
   *   where: {
   *     // ... the filter for the WalletTransactions we want to count
   *   }
   * })
  **/
  count<T extends WalletTransactionCountArgs>(
    args?: Prisma.Subset<T, WalletTransactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WalletTransactionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WalletTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WalletTransactionAggregateArgs>(args: Prisma.Subset<T, WalletTransactionAggregateArgs>): Prisma.PrismaPromise<GetWalletTransactionAggregateType<T>>

  /**
   * Group by WalletTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletTransactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WalletTransactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WalletTransactionGroupByArgs['orderBy'] }
      : { orderBy?: WalletTransactionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WalletTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WalletTransaction model
 */
readonly fields: WalletTransactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WalletTransaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WalletTransactionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  wallet<T extends Prisma.WalletDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WalletDefaultArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WalletTransaction model
 */
export interface WalletTransactionFieldRefs {
  readonly id: Prisma.FieldRef<"WalletTransaction", 'Int'>
  readonly uid: Prisma.FieldRef<"WalletTransaction", 'String'>
  readonly walletId: Prisma.FieldRef<"WalletTransaction", 'Int'>
  readonly amount: Prisma.FieldRef<"WalletTransaction", 'Decimal'>
  readonly type: Prisma.FieldRef<"WalletTransaction", 'TransactionType'>
  readonly status: Prisma.FieldRef<"WalletTransaction", 'TransactionStatus'>
  readonly description: Prisma.FieldRef<"WalletTransaction", 'String'>
  readonly sourceId: Prisma.FieldRef<"WalletTransaction", 'String'>
  readonly createdAt: Prisma.FieldRef<"WalletTransaction", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WalletTransaction", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WalletTransaction findUnique
 */
export type WalletTransactionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransaction to fetch.
   */
  where: Prisma.WalletTransactionWhereUniqueInput
}

/**
 * WalletTransaction findUniqueOrThrow
 */
export type WalletTransactionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransaction to fetch.
   */
  where: Prisma.WalletTransactionWhereUniqueInput
}

/**
 * WalletTransaction findFirst
 */
export type WalletTransactionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransaction to fetch.
   */
  where?: Prisma.WalletTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletTransactions to fetch.
   */
  orderBy?: Prisma.WalletTransactionOrderByWithRelationInput | Prisma.WalletTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WalletTransactions.
   */
  cursor?: Prisma.WalletTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WalletTransactions.
   */
  distinct?: Prisma.WalletTransactionScalarFieldEnum | Prisma.WalletTransactionScalarFieldEnum[]
}

/**
 * WalletTransaction findFirstOrThrow
 */
export type WalletTransactionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransaction to fetch.
   */
  where?: Prisma.WalletTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletTransactions to fetch.
   */
  orderBy?: Prisma.WalletTransactionOrderByWithRelationInput | Prisma.WalletTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WalletTransactions.
   */
  cursor?: Prisma.WalletTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WalletTransactions.
   */
  distinct?: Prisma.WalletTransactionScalarFieldEnum | Prisma.WalletTransactionScalarFieldEnum[]
}

/**
 * WalletTransaction findMany
 */
export type WalletTransactionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * Filter, which WalletTransactions to fetch.
   */
  where?: Prisma.WalletTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletTransactions to fetch.
   */
  orderBy?: Prisma.WalletTransactionOrderByWithRelationInput | Prisma.WalletTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WalletTransactions.
   */
  cursor?: Prisma.WalletTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletTransactions.
   */
  skip?: number
  distinct?: Prisma.WalletTransactionScalarFieldEnum | Prisma.WalletTransactionScalarFieldEnum[]
}

/**
 * WalletTransaction create
 */
export type WalletTransactionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * The data needed to create a WalletTransaction.
   */
  data: Prisma.XOR<Prisma.WalletTransactionCreateInput, Prisma.WalletTransactionUncheckedCreateInput>
}

/**
 * WalletTransaction createMany
 */
export type WalletTransactionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WalletTransactions.
   */
  data: Prisma.WalletTransactionCreateManyInput | Prisma.WalletTransactionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WalletTransaction update
 */
export type WalletTransactionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * The data needed to update a WalletTransaction.
   */
  data: Prisma.XOR<Prisma.WalletTransactionUpdateInput, Prisma.WalletTransactionUncheckedUpdateInput>
  /**
   * Choose, which WalletTransaction to update.
   */
  where: Prisma.WalletTransactionWhereUniqueInput
}

/**
 * WalletTransaction updateMany
 */
export type WalletTransactionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WalletTransactions.
   */
  data: Prisma.XOR<Prisma.WalletTransactionUpdateManyMutationInput, Prisma.WalletTransactionUncheckedUpdateManyInput>
  /**
   * Filter which WalletTransactions to update
   */
  where?: Prisma.WalletTransactionWhereInput
  /**
   * Limit how many WalletTransactions to update.
   */
  limit?: number
}

/**
 * WalletTransaction upsert
 */
export type WalletTransactionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * The filter to search for the WalletTransaction to update in case it exists.
   */
  where: Prisma.WalletTransactionWhereUniqueInput
  /**
   * In case the WalletTransaction found by the `where` argument doesn't exist, create a new WalletTransaction with this data.
   */
  create: Prisma.XOR<Prisma.WalletTransactionCreateInput, Prisma.WalletTransactionUncheckedCreateInput>
  /**
   * In case the WalletTransaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WalletTransactionUpdateInput, Prisma.WalletTransactionUncheckedUpdateInput>
}

/**
 * WalletTransaction delete
 */
export type WalletTransactionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
  /**
   * Filter which WalletTransaction to delete.
   */
  where: Prisma.WalletTransactionWhereUniqueInput
}

/**
 * WalletTransaction deleteMany
 */
export type WalletTransactionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WalletTransactions to delete
   */
  where?: Prisma.WalletTransactionWhereInput
  /**
   * Limit how many WalletTransactions to delete.
   */
  limit?: number
}

/**
 * WalletTransaction without action
 */
export type WalletTransactionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletTransaction
   */
  select?: Prisma.WalletTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletTransaction
   */
  omit?: Prisma.WalletTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletTransactionInclude<ExtArgs> | null
}
