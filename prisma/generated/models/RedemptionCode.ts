
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `RedemptionCode` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RedemptionCode
 * 
 */
export type RedemptionCodeModel = runtime.Types.Result.DefaultSelection<Prisma.$RedemptionCodePayload>

export type AggregateRedemptionCode = {
  _count: RedemptionCodeCountAggregateOutputType | null
  _avg: RedemptionCodeAvgAggregateOutputType | null
  _sum: RedemptionCodeSumAggregateOutputType | null
  _min: RedemptionCodeMinAggregateOutputType | null
  _max: RedemptionCodeMaxAggregateOutputType | null
}

export type RedemptionCodeAvgAggregateOutputType = {
  id: number | null
  amount: number | null
  redeemerId: number | null
}

export type RedemptionCodeSumAggregateOutputType = {
  id: number | null
  amount: number | null
  redeemerId: number | null
}

export type RedemptionCodeMinAggregateOutputType = {
  id: number | null
  code: string | null
  amount: number | null
  remark: string | null
  createdAt: Date | null
  expiredAt: Date | null
  redeemedAt: Date | null
  redeemerId: number | null
}

export type RedemptionCodeMaxAggregateOutputType = {
  id: number | null
  code: string | null
  amount: number | null
  remark: string | null
  createdAt: Date | null
  expiredAt: Date | null
  redeemedAt: Date | null
  redeemerId: number | null
}

export type RedemptionCodeCountAggregateOutputType = {
  id: number
  code: number
  amount: number
  remark: number
  createdAt: number
  expiredAt: number
  redeemedAt: number
  redeemerId: number
  _all: number
}


export type RedemptionCodeAvgAggregateInputType = {
  id?: true
  amount?: true
  redeemerId?: true
}

export type RedemptionCodeSumAggregateInputType = {
  id?: true
  amount?: true
  redeemerId?: true
}

export type RedemptionCodeMinAggregateInputType = {
  id?: true
  code?: true
  amount?: true
  remark?: true
  createdAt?: true
  expiredAt?: true
  redeemedAt?: true
  redeemerId?: true
}

export type RedemptionCodeMaxAggregateInputType = {
  id?: true
  code?: true
  amount?: true
  remark?: true
  createdAt?: true
  expiredAt?: true
  redeemedAt?: true
  redeemerId?: true
}

export type RedemptionCodeCountAggregateInputType = {
  id?: true
  code?: true
  amount?: true
  remark?: true
  createdAt?: true
  expiredAt?: true
  redeemedAt?: true
  redeemerId?: true
  _all?: true
}

export type RedemptionCodeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RedemptionCode to aggregate.
   */
  where?: Prisma.RedemptionCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RedemptionCodes to fetch.
   */
  orderBy?: Prisma.RedemptionCodeOrderByWithRelationInput | Prisma.RedemptionCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RedemptionCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RedemptionCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RedemptionCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RedemptionCodes
  **/
  _count?: true | RedemptionCodeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RedemptionCodeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RedemptionCodeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RedemptionCodeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RedemptionCodeMaxAggregateInputType
}

export type GetRedemptionCodeAggregateType<T extends RedemptionCodeAggregateArgs> = {
      [P in keyof T & keyof AggregateRedemptionCode]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRedemptionCode[P]>
    : Prisma.GetScalarType<T[P], AggregateRedemptionCode[P]>
}




export type RedemptionCodeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RedemptionCodeWhereInput
  orderBy?: Prisma.RedemptionCodeOrderByWithAggregationInput | Prisma.RedemptionCodeOrderByWithAggregationInput[]
  by: Prisma.RedemptionCodeScalarFieldEnum[] | Prisma.RedemptionCodeScalarFieldEnum
  having?: Prisma.RedemptionCodeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RedemptionCodeCountAggregateInputType | true
  _avg?: RedemptionCodeAvgAggregateInputType
  _sum?: RedemptionCodeSumAggregateInputType
  _min?: RedemptionCodeMinAggregateInputType
  _max?: RedemptionCodeMaxAggregateInputType
}

export type RedemptionCodeGroupByOutputType = {
  id: number
  code: string
  amount: number
  remark: string
  createdAt: Date
  expiredAt: Date | null
  redeemedAt: Date | null
  redeemerId: number | null
  _count: RedemptionCodeCountAggregateOutputType | null
  _avg: RedemptionCodeAvgAggregateOutputType | null
  _sum: RedemptionCodeSumAggregateOutputType | null
  _min: RedemptionCodeMinAggregateOutputType | null
  _max: RedemptionCodeMaxAggregateOutputType | null
}

type GetRedemptionCodeGroupByPayload<T extends RedemptionCodeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RedemptionCodeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RedemptionCodeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RedemptionCodeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RedemptionCodeGroupByOutputType[P]>
      }
    >
  > 



export type RedemptionCodeWhereInput = {
  AND?: Prisma.RedemptionCodeWhereInput | Prisma.RedemptionCodeWhereInput[]
  OR?: Prisma.RedemptionCodeWhereInput[]
  NOT?: Prisma.RedemptionCodeWhereInput | Prisma.RedemptionCodeWhereInput[]
  id?: Prisma.IntFilter<"RedemptionCode"> | number
  code?: Prisma.StringFilter<"RedemptionCode"> | string
  amount?: Prisma.IntFilter<"RedemptionCode"> | number
  remark?: Prisma.StringFilter<"RedemptionCode"> | string
  createdAt?: Prisma.DateTimeFilter<"RedemptionCode"> | Date | string
  expiredAt?: Prisma.DateTimeNullableFilter<"RedemptionCode"> | Date | string | null
  redeemedAt?: Prisma.DateTimeNullableFilter<"RedemptionCode"> | Date | string | null
  redeemerId?: Prisma.IntNullableFilter<"RedemptionCode"> | number | null
  redeemer?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type RedemptionCodeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  redeemedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  redeemerId?: Prisma.SortOrderInput | Prisma.SortOrder
  redeemer?: Prisma.UserOrderByWithRelationInput
  _relevance?: Prisma.RedemptionCodeOrderByRelevanceInput
}

export type RedemptionCodeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  code?: string
  AND?: Prisma.RedemptionCodeWhereInput | Prisma.RedemptionCodeWhereInput[]
  OR?: Prisma.RedemptionCodeWhereInput[]
  NOT?: Prisma.RedemptionCodeWhereInput | Prisma.RedemptionCodeWhereInput[]
  amount?: Prisma.IntFilter<"RedemptionCode"> | number
  remark?: Prisma.StringFilter<"RedemptionCode"> | string
  createdAt?: Prisma.DateTimeFilter<"RedemptionCode"> | Date | string
  expiredAt?: Prisma.DateTimeNullableFilter<"RedemptionCode"> | Date | string | null
  redeemedAt?: Prisma.DateTimeNullableFilter<"RedemptionCode"> | Date | string | null
  redeemerId?: Prisma.IntNullableFilter<"RedemptionCode"> | number | null
  redeemer?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id" | "code">

export type RedemptionCodeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  redeemedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  redeemerId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.RedemptionCodeCountOrderByAggregateInput
  _avg?: Prisma.RedemptionCodeAvgOrderByAggregateInput
  _max?: Prisma.RedemptionCodeMaxOrderByAggregateInput
  _min?: Prisma.RedemptionCodeMinOrderByAggregateInput
  _sum?: Prisma.RedemptionCodeSumOrderByAggregateInput
}

export type RedemptionCodeScalarWhereWithAggregatesInput = {
  AND?: Prisma.RedemptionCodeScalarWhereWithAggregatesInput | Prisma.RedemptionCodeScalarWhereWithAggregatesInput[]
  OR?: Prisma.RedemptionCodeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RedemptionCodeScalarWhereWithAggregatesInput | Prisma.RedemptionCodeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"RedemptionCode"> | number
  code?: Prisma.StringWithAggregatesFilter<"RedemptionCode"> | string
  amount?: Prisma.IntWithAggregatesFilter<"RedemptionCode"> | number
  remark?: Prisma.StringWithAggregatesFilter<"RedemptionCode"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"RedemptionCode"> | Date | string
  expiredAt?: Prisma.DateTimeNullableWithAggregatesFilter<"RedemptionCode"> | Date | string | null
  redeemedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"RedemptionCode"> | Date | string | null
  redeemerId?: Prisma.IntNullableWithAggregatesFilter<"RedemptionCode"> | number | null
}

export type RedemptionCodeCreateInput = {
  code: string
  amount: number
  remark?: string
  createdAt?: Date | string
  expiredAt?: Date | string | null
  redeemedAt?: Date | string | null
  redeemer?: Prisma.UserCreateNestedOneWithoutRedeemCodesInput
}

export type RedemptionCodeUncheckedCreateInput = {
  id?: number
  code: string
  amount: number
  remark?: string
  createdAt?: Date | string
  expiredAt?: Date | string | null
  redeemedAt?: Date | string | null
  redeemerId?: number | null
}

export type RedemptionCodeUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemer?: Prisma.UserUpdateOneWithoutRedeemCodesNestedInput
}

export type RedemptionCodeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemerId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RedemptionCodeCreateManyInput = {
  id?: number
  code: string
  amount: number
  remark?: string
  createdAt?: Date | string
  expiredAt?: Date | string | null
  redeemedAt?: Date | string | null
  redeemerId?: number | null
}

export type RedemptionCodeUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type RedemptionCodeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemerId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type RedemptionCodeListRelationFilter = {
  every?: Prisma.RedemptionCodeWhereInput
  some?: Prisma.RedemptionCodeWhereInput
  none?: Prisma.RedemptionCodeWhereInput
}

export type RedemptionCodeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RedemptionCodeOrderByRelevanceInput = {
  fields: Prisma.RedemptionCodeOrderByRelevanceFieldEnum | Prisma.RedemptionCodeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type RedemptionCodeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  redeemedAt?: Prisma.SortOrder
  redeemerId?: Prisma.SortOrder
}

export type RedemptionCodeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  redeemerId?: Prisma.SortOrder
}

export type RedemptionCodeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  redeemedAt?: Prisma.SortOrder
  redeemerId?: Prisma.SortOrder
}

export type RedemptionCodeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  redeemedAt?: Prisma.SortOrder
  redeemerId?: Prisma.SortOrder
}

export type RedemptionCodeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  redeemerId?: Prisma.SortOrder
}

export type RedemptionCodeCreateNestedManyWithoutRedeemerInput = {
  create?: Prisma.XOR<Prisma.RedemptionCodeCreateWithoutRedeemerInput, Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput> | Prisma.RedemptionCodeCreateWithoutRedeemerInput[] | Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput[]
  connectOrCreate?: Prisma.RedemptionCodeCreateOrConnectWithoutRedeemerInput | Prisma.RedemptionCodeCreateOrConnectWithoutRedeemerInput[]
  createMany?: Prisma.RedemptionCodeCreateManyRedeemerInputEnvelope
  connect?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
}

export type RedemptionCodeUncheckedCreateNestedManyWithoutRedeemerInput = {
  create?: Prisma.XOR<Prisma.RedemptionCodeCreateWithoutRedeemerInput, Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput> | Prisma.RedemptionCodeCreateWithoutRedeemerInput[] | Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput[]
  connectOrCreate?: Prisma.RedemptionCodeCreateOrConnectWithoutRedeemerInput | Prisma.RedemptionCodeCreateOrConnectWithoutRedeemerInput[]
  createMany?: Prisma.RedemptionCodeCreateManyRedeemerInputEnvelope
  connect?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
}

export type RedemptionCodeUpdateManyWithoutRedeemerNestedInput = {
  create?: Prisma.XOR<Prisma.RedemptionCodeCreateWithoutRedeemerInput, Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput> | Prisma.RedemptionCodeCreateWithoutRedeemerInput[] | Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput[]
  connectOrCreate?: Prisma.RedemptionCodeCreateOrConnectWithoutRedeemerInput | Prisma.RedemptionCodeCreateOrConnectWithoutRedeemerInput[]
  upsert?: Prisma.RedemptionCodeUpsertWithWhereUniqueWithoutRedeemerInput | Prisma.RedemptionCodeUpsertWithWhereUniqueWithoutRedeemerInput[]
  createMany?: Prisma.RedemptionCodeCreateManyRedeemerInputEnvelope
  set?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
  disconnect?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
  delete?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
  connect?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
  update?: Prisma.RedemptionCodeUpdateWithWhereUniqueWithoutRedeemerInput | Prisma.RedemptionCodeUpdateWithWhereUniqueWithoutRedeemerInput[]
  updateMany?: Prisma.RedemptionCodeUpdateManyWithWhereWithoutRedeemerInput | Prisma.RedemptionCodeUpdateManyWithWhereWithoutRedeemerInput[]
  deleteMany?: Prisma.RedemptionCodeScalarWhereInput | Prisma.RedemptionCodeScalarWhereInput[]
}

export type RedemptionCodeUncheckedUpdateManyWithoutRedeemerNestedInput = {
  create?: Prisma.XOR<Prisma.RedemptionCodeCreateWithoutRedeemerInput, Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput> | Prisma.RedemptionCodeCreateWithoutRedeemerInput[] | Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput[]
  connectOrCreate?: Prisma.RedemptionCodeCreateOrConnectWithoutRedeemerInput | Prisma.RedemptionCodeCreateOrConnectWithoutRedeemerInput[]
  upsert?: Prisma.RedemptionCodeUpsertWithWhereUniqueWithoutRedeemerInput | Prisma.RedemptionCodeUpsertWithWhereUniqueWithoutRedeemerInput[]
  createMany?: Prisma.RedemptionCodeCreateManyRedeemerInputEnvelope
  set?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
  disconnect?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
  delete?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
  connect?: Prisma.RedemptionCodeWhereUniqueInput | Prisma.RedemptionCodeWhereUniqueInput[]
  update?: Prisma.RedemptionCodeUpdateWithWhereUniqueWithoutRedeemerInput | Prisma.RedemptionCodeUpdateWithWhereUniqueWithoutRedeemerInput[]
  updateMany?: Prisma.RedemptionCodeUpdateManyWithWhereWithoutRedeemerInput | Prisma.RedemptionCodeUpdateManyWithWhereWithoutRedeemerInput[]
  deleteMany?: Prisma.RedemptionCodeScalarWhereInput | Prisma.RedemptionCodeScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type RedemptionCodeCreateWithoutRedeemerInput = {
  code: string
  amount: number
  remark?: string
  createdAt?: Date | string
  expiredAt?: Date | string | null
  redeemedAt?: Date | string | null
}

export type RedemptionCodeUncheckedCreateWithoutRedeemerInput = {
  id?: number
  code: string
  amount: number
  remark?: string
  createdAt?: Date | string
  expiredAt?: Date | string | null
  redeemedAt?: Date | string | null
}

export type RedemptionCodeCreateOrConnectWithoutRedeemerInput = {
  where: Prisma.RedemptionCodeWhereUniqueInput
  create: Prisma.XOR<Prisma.RedemptionCodeCreateWithoutRedeemerInput, Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput>
}

export type RedemptionCodeCreateManyRedeemerInputEnvelope = {
  data: Prisma.RedemptionCodeCreateManyRedeemerInput | Prisma.RedemptionCodeCreateManyRedeemerInput[]
  skipDuplicates?: boolean
}

export type RedemptionCodeUpsertWithWhereUniqueWithoutRedeemerInput = {
  where: Prisma.RedemptionCodeWhereUniqueInput
  update: Prisma.XOR<Prisma.RedemptionCodeUpdateWithoutRedeemerInput, Prisma.RedemptionCodeUncheckedUpdateWithoutRedeemerInput>
  create: Prisma.XOR<Prisma.RedemptionCodeCreateWithoutRedeemerInput, Prisma.RedemptionCodeUncheckedCreateWithoutRedeemerInput>
}

export type RedemptionCodeUpdateWithWhereUniqueWithoutRedeemerInput = {
  where: Prisma.RedemptionCodeWhereUniqueInput
  data: Prisma.XOR<Prisma.RedemptionCodeUpdateWithoutRedeemerInput, Prisma.RedemptionCodeUncheckedUpdateWithoutRedeemerInput>
}

export type RedemptionCodeUpdateManyWithWhereWithoutRedeemerInput = {
  where: Prisma.RedemptionCodeScalarWhereInput
  data: Prisma.XOR<Prisma.RedemptionCodeUpdateManyMutationInput, Prisma.RedemptionCodeUncheckedUpdateManyWithoutRedeemerInput>
}

export type RedemptionCodeScalarWhereInput = {
  AND?: Prisma.RedemptionCodeScalarWhereInput | Prisma.RedemptionCodeScalarWhereInput[]
  OR?: Prisma.RedemptionCodeScalarWhereInput[]
  NOT?: Prisma.RedemptionCodeScalarWhereInput | Prisma.RedemptionCodeScalarWhereInput[]
  id?: Prisma.IntFilter<"RedemptionCode"> | number
  code?: Prisma.StringFilter<"RedemptionCode"> | string
  amount?: Prisma.IntFilter<"RedemptionCode"> | number
  remark?: Prisma.StringFilter<"RedemptionCode"> | string
  createdAt?: Prisma.DateTimeFilter<"RedemptionCode"> | Date | string
  expiredAt?: Prisma.DateTimeNullableFilter<"RedemptionCode"> | Date | string | null
  redeemedAt?: Prisma.DateTimeNullableFilter<"RedemptionCode"> | Date | string | null
  redeemerId?: Prisma.IntNullableFilter<"RedemptionCode"> | number | null
}

export type RedemptionCodeCreateManyRedeemerInput = {
  id?: number
  code: string
  amount: number
  remark?: string
  createdAt?: Date | string
  expiredAt?: Date | string | null
  redeemedAt?: Date | string | null
}

export type RedemptionCodeUpdateWithoutRedeemerInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type RedemptionCodeUncheckedUpdateWithoutRedeemerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type RedemptionCodeUncheckedUpdateManyWithoutRedeemerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  redeemedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type RedemptionCodeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  amount?: boolean
  remark?: boolean
  createdAt?: boolean
  expiredAt?: boolean
  redeemedAt?: boolean
  redeemerId?: boolean
  redeemer?: boolean | Prisma.RedemptionCode$redeemerArgs<ExtArgs>
}, ExtArgs["result"]["redemptionCode"]>



export type RedemptionCodeSelectScalar = {
  id?: boolean
  code?: boolean
  amount?: boolean
  remark?: boolean
  createdAt?: boolean
  expiredAt?: boolean
  redeemedAt?: boolean
  redeemerId?: boolean
}

export type RedemptionCodeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "code" | "amount" | "remark" | "createdAt" | "expiredAt" | "redeemedAt" | "redeemerId", ExtArgs["result"]["redemptionCode"]>
export type RedemptionCodeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  redeemer?: boolean | Prisma.RedemptionCode$redeemerArgs<ExtArgs>
}

export type $RedemptionCodePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RedemptionCode"
  objects: {
    redeemer: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    code: string
    amount: number
    remark: string
    createdAt: Date
    expiredAt: Date | null
    redeemedAt: Date | null
    redeemerId: number | null
  }, ExtArgs["result"]["redemptionCode"]>
  composites: {}
}

export type RedemptionCodeGetPayload<S extends boolean | null | undefined | RedemptionCodeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload, S>

export type RedemptionCodeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RedemptionCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RedemptionCodeCountAggregateInputType | true
  }

export interface RedemptionCodeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RedemptionCode'], meta: { name: 'RedemptionCode' } }
  /**
   * Find zero or one RedemptionCode that matches the filter.
   * @param {RedemptionCodeFindUniqueArgs} args - Arguments to find a RedemptionCode
   * @example
   * // Get one RedemptionCode
   * const redemptionCode = await prisma.redemptionCode.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RedemptionCodeFindUniqueArgs>(args: Prisma.SelectSubset<T, RedemptionCodeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RedemptionCodeClient<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RedemptionCode that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RedemptionCodeFindUniqueOrThrowArgs} args - Arguments to find a RedemptionCode
   * @example
   * // Get one RedemptionCode
   * const redemptionCode = await prisma.redemptionCode.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RedemptionCodeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RedemptionCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RedemptionCodeClient<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RedemptionCode that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RedemptionCodeFindFirstArgs} args - Arguments to find a RedemptionCode
   * @example
   * // Get one RedemptionCode
   * const redemptionCode = await prisma.redemptionCode.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RedemptionCodeFindFirstArgs>(args?: Prisma.SelectSubset<T, RedemptionCodeFindFirstArgs<ExtArgs>>): Prisma.Prisma__RedemptionCodeClient<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RedemptionCode that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RedemptionCodeFindFirstOrThrowArgs} args - Arguments to find a RedemptionCode
   * @example
   * // Get one RedemptionCode
   * const redemptionCode = await prisma.redemptionCode.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RedemptionCodeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RedemptionCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RedemptionCodeClient<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RedemptionCodes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RedemptionCodeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RedemptionCodes
   * const redemptionCodes = await prisma.redemptionCode.findMany()
   * 
   * // Get first 10 RedemptionCodes
   * const redemptionCodes = await prisma.redemptionCode.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const redemptionCodeWithIdOnly = await prisma.redemptionCode.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RedemptionCodeFindManyArgs>(args?: Prisma.SelectSubset<T, RedemptionCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RedemptionCode.
   * @param {RedemptionCodeCreateArgs} args - Arguments to create a RedemptionCode.
   * @example
   * // Create one RedemptionCode
   * const RedemptionCode = await prisma.redemptionCode.create({
   *   data: {
   *     // ... data to create a RedemptionCode
   *   }
   * })
   * 
   */
  create<T extends RedemptionCodeCreateArgs>(args: Prisma.SelectSubset<T, RedemptionCodeCreateArgs<ExtArgs>>): Prisma.Prisma__RedemptionCodeClient<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RedemptionCodes.
   * @param {RedemptionCodeCreateManyArgs} args - Arguments to create many RedemptionCodes.
   * @example
   * // Create many RedemptionCodes
   * const redemptionCode = await prisma.redemptionCode.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RedemptionCodeCreateManyArgs>(args?: Prisma.SelectSubset<T, RedemptionCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a RedemptionCode.
   * @param {RedemptionCodeDeleteArgs} args - Arguments to delete one RedemptionCode.
   * @example
   * // Delete one RedemptionCode
   * const RedemptionCode = await prisma.redemptionCode.delete({
   *   where: {
   *     // ... filter to delete one RedemptionCode
   *   }
   * })
   * 
   */
  delete<T extends RedemptionCodeDeleteArgs>(args: Prisma.SelectSubset<T, RedemptionCodeDeleteArgs<ExtArgs>>): Prisma.Prisma__RedemptionCodeClient<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RedemptionCode.
   * @param {RedemptionCodeUpdateArgs} args - Arguments to update one RedemptionCode.
   * @example
   * // Update one RedemptionCode
   * const redemptionCode = await prisma.redemptionCode.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RedemptionCodeUpdateArgs>(args: Prisma.SelectSubset<T, RedemptionCodeUpdateArgs<ExtArgs>>): Prisma.Prisma__RedemptionCodeClient<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RedemptionCodes.
   * @param {RedemptionCodeDeleteManyArgs} args - Arguments to filter RedemptionCodes to delete.
   * @example
   * // Delete a few RedemptionCodes
   * const { count } = await prisma.redemptionCode.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RedemptionCodeDeleteManyArgs>(args?: Prisma.SelectSubset<T, RedemptionCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RedemptionCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RedemptionCodeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RedemptionCodes
   * const redemptionCode = await prisma.redemptionCode.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RedemptionCodeUpdateManyArgs>(args: Prisma.SelectSubset<T, RedemptionCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one RedemptionCode.
   * @param {RedemptionCodeUpsertArgs} args - Arguments to update or create a RedemptionCode.
   * @example
   * // Update or create a RedemptionCode
   * const redemptionCode = await prisma.redemptionCode.upsert({
   *   create: {
   *     // ... data to create a RedemptionCode
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RedemptionCode we want to update
   *   }
   * })
   */
  upsert<T extends RedemptionCodeUpsertArgs>(args: Prisma.SelectSubset<T, RedemptionCodeUpsertArgs<ExtArgs>>): Prisma.Prisma__RedemptionCodeClient<runtime.Types.Result.GetResult<Prisma.$RedemptionCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RedemptionCodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RedemptionCodeCountArgs} args - Arguments to filter RedemptionCodes to count.
   * @example
   * // Count the number of RedemptionCodes
   * const count = await prisma.redemptionCode.count({
   *   where: {
   *     // ... the filter for the RedemptionCodes we want to count
   *   }
   * })
  **/
  count<T extends RedemptionCodeCountArgs>(
    args?: Prisma.Subset<T, RedemptionCodeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RedemptionCodeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RedemptionCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RedemptionCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RedemptionCodeAggregateArgs>(args: Prisma.Subset<T, RedemptionCodeAggregateArgs>): Prisma.PrismaPromise<GetRedemptionCodeAggregateType<T>>

  /**
   * Group by RedemptionCode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RedemptionCodeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RedemptionCodeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RedemptionCodeGroupByArgs['orderBy'] }
      : { orderBy?: RedemptionCodeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RedemptionCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRedemptionCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RedemptionCode model
 */
readonly fields: RedemptionCodeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RedemptionCode.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RedemptionCodeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  redeemer<T extends Prisma.RedemptionCode$redeemerArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RedemptionCode$redeemerArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RedemptionCode model
 */
export interface RedemptionCodeFieldRefs {
  readonly id: Prisma.FieldRef<"RedemptionCode", 'Int'>
  readonly code: Prisma.FieldRef<"RedemptionCode", 'String'>
  readonly amount: Prisma.FieldRef<"RedemptionCode", 'Int'>
  readonly remark: Prisma.FieldRef<"RedemptionCode", 'String'>
  readonly createdAt: Prisma.FieldRef<"RedemptionCode", 'DateTime'>
  readonly expiredAt: Prisma.FieldRef<"RedemptionCode", 'DateTime'>
  readonly redeemedAt: Prisma.FieldRef<"RedemptionCode", 'DateTime'>
  readonly redeemerId: Prisma.FieldRef<"RedemptionCode", 'Int'>
}
    

// Custom InputTypes
/**
 * RedemptionCode findUnique
 */
export type RedemptionCodeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * Filter, which RedemptionCode to fetch.
   */
  where: Prisma.RedemptionCodeWhereUniqueInput
}

/**
 * RedemptionCode findUniqueOrThrow
 */
export type RedemptionCodeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * Filter, which RedemptionCode to fetch.
   */
  where: Prisma.RedemptionCodeWhereUniqueInput
}

/**
 * RedemptionCode findFirst
 */
export type RedemptionCodeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * Filter, which RedemptionCode to fetch.
   */
  where?: Prisma.RedemptionCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RedemptionCodes to fetch.
   */
  orderBy?: Prisma.RedemptionCodeOrderByWithRelationInput | Prisma.RedemptionCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RedemptionCodes.
   */
  cursor?: Prisma.RedemptionCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RedemptionCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RedemptionCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RedemptionCodes.
   */
  distinct?: Prisma.RedemptionCodeScalarFieldEnum | Prisma.RedemptionCodeScalarFieldEnum[]
}

/**
 * RedemptionCode findFirstOrThrow
 */
export type RedemptionCodeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * Filter, which RedemptionCode to fetch.
   */
  where?: Prisma.RedemptionCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RedemptionCodes to fetch.
   */
  orderBy?: Prisma.RedemptionCodeOrderByWithRelationInput | Prisma.RedemptionCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RedemptionCodes.
   */
  cursor?: Prisma.RedemptionCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RedemptionCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RedemptionCodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RedemptionCodes.
   */
  distinct?: Prisma.RedemptionCodeScalarFieldEnum | Prisma.RedemptionCodeScalarFieldEnum[]
}

/**
 * RedemptionCode findMany
 */
export type RedemptionCodeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * Filter, which RedemptionCodes to fetch.
   */
  where?: Prisma.RedemptionCodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RedemptionCodes to fetch.
   */
  orderBy?: Prisma.RedemptionCodeOrderByWithRelationInput | Prisma.RedemptionCodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RedemptionCodes.
   */
  cursor?: Prisma.RedemptionCodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RedemptionCodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RedemptionCodes.
   */
  skip?: number
  distinct?: Prisma.RedemptionCodeScalarFieldEnum | Prisma.RedemptionCodeScalarFieldEnum[]
}

/**
 * RedemptionCode create
 */
export type RedemptionCodeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * The data needed to create a RedemptionCode.
   */
  data: Prisma.XOR<Prisma.RedemptionCodeCreateInput, Prisma.RedemptionCodeUncheckedCreateInput>
}

/**
 * RedemptionCode createMany
 */
export type RedemptionCodeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RedemptionCodes.
   */
  data: Prisma.RedemptionCodeCreateManyInput | Prisma.RedemptionCodeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RedemptionCode update
 */
export type RedemptionCodeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * The data needed to update a RedemptionCode.
   */
  data: Prisma.XOR<Prisma.RedemptionCodeUpdateInput, Prisma.RedemptionCodeUncheckedUpdateInput>
  /**
   * Choose, which RedemptionCode to update.
   */
  where: Prisma.RedemptionCodeWhereUniqueInput
}

/**
 * RedemptionCode updateMany
 */
export type RedemptionCodeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RedemptionCodes.
   */
  data: Prisma.XOR<Prisma.RedemptionCodeUpdateManyMutationInput, Prisma.RedemptionCodeUncheckedUpdateManyInput>
  /**
   * Filter which RedemptionCodes to update
   */
  where?: Prisma.RedemptionCodeWhereInput
  /**
   * Limit how many RedemptionCodes to update.
   */
  limit?: number
}

/**
 * RedemptionCode upsert
 */
export type RedemptionCodeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * The filter to search for the RedemptionCode to update in case it exists.
   */
  where: Prisma.RedemptionCodeWhereUniqueInput
  /**
   * In case the RedemptionCode found by the `where` argument doesn't exist, create a new RedemptionCode with this data.
   */
  create: Prisma.XOR<Prisma.RedemptionCodeCreateInput, Prisma.RedemptionCodeUncheckedCreateInput>
  /**
   * In case the RedemptionCode was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RedemptionCodeUpdateInput, Prisma.RedemptionCodeUncheckedUpdateInput>
}

/**
 * RedemptionCode delete
 */
export type RedemptionCodeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
  /**
   * Filter which RedemptionCode to delete.
   */
  where: Prisma.RedemptionCodeWhereUniqueInput
}

/**
 * RedemptionCode deleteMany
 */
export type RedemptionCodeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RedemptionCodes to delete
   */
  where?: Prisma.RedemptionCodeWhereInput
  /**
   * Limit how many RedemptionCodes to delete.
   */
  limit?: number
}

/**
 * RedemptionCode.redeemer
 */
export type RedemptionCode$redeemerArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * RedemptionCode without action
 */
export type RedemptionCodeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RedemptionCode
   */
  select?: Prisma.RedemptionCodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RedemptionCode
   */
  omit?: Prisma.RedemptionCodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RedemptionCodeInclude<ExtArgs> | null
}
