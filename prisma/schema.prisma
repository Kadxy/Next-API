generator client {
  provider = "prisma-client"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

// -----------------------------------------------------------------------------
// Core User & Wallet Management Models (保持不变，已是你原有设计)
// -----------------------------------------------------------------------------
model User {
  id             Int              @id @default(autoincrement())
  uid            String           @unique @default(uuid())
  displayName    String?          @db.VarChar(32)
  avatar         String?          @db.Text
  email          String?          @unique
  phone          String?          @unique
  gitHubId       String?          @unique
  googleId       String?          @unique
  isDeleted      Boolean          @default(false)
  isAdmin        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  lastLoginAt    DateTime?
  wallet         Wallet? // 拥有的钱包(一对一，一个用户只能作为一个钱包的owner)
  walletMembers  WalletMember[] // 作为成员加入的钱包
  passkeys       Passkey[] // 绑定的passkey，用于登录
  redeemCodes    RedemptionCode[] // 使用过的兑换码
  createdApiKeys ApiKey[] // 创建的API Keys

  @@index([uid, isDeleted])
  @@map("users")
}

model Wallet {
  id          Int      @id @default(autoincrement())
  uid         String   @unique @default(uuid())
  displayName String   @default("Default Wallet") @db.VarChar(32)
  balance     Decimal  @default(0) @db.Decimal(12, 6)
  version     Int      @default(1) // 乐观锁
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members           WalletMember[] // 钱包成员
  apiKeys           ApiKey[] // 使用此钱包的API Keys
  WalletTransaction WalletTransaction[]
  ApiCallBilling    ApiCallBilling[] // 钱包关联的ApiCallBilling记录

  @@map("wallets")
}

model WalletMember {
  id          Int      @id @default(autoincrement())
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  walletId    Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  alias       String   @default("") @db.VarChar(32) // 成员别名
  creditLimit Decimal  @db.Decimal(16, 8) // 信用额度
  creditUsed  Decimal  @default(0) @db.Decimal(16, 8) // 历史总消费（累计）
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([walletId, userId])
  @@index([userId, isActive])
  @@index([walletId, isActive])
  @@map("wallet_members")
}

model ApiKey {
  id          Int       @id @default(autoincrement())
  wallet      Wallet    @relation(fields: [walletId], references: [id])
  walletId    Int
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   Int
  hashKey     String    @unique @db.VarChar(64)
  preview     String    @db.VarChar(8)
  displayName String    @db.VarChar(32)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsedAt  DateTime?

  @@index([hashKey, isActive])
  @@index([walletId, isActive])
  @@index([creatorId, isActive])
  @@map("api_keys")
}

model Passkey {
  id             String    @id @unique @db.VarChar(255)
  publicKey      Bytes
  webAuthnUserID String    @db.VarChar(255)
  counter        BigInt    @default(0)
  displayName    String    @default("")
  transports     String?   @db.VarChar(255)
  deviceType     String    @default("singleDevice") @db.VarChar(32)
  backedUp       Boolean   @default(false)
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastUsedAt     DateTime?
  user           User      @relation(fields: [userId], references: [id])
  userId         Int

  @@unique([webAuthnUserID, userId])
  @@index([id])
  @@index([userId, isDeleted])
  @@index([id, userId, isDeleted])
  @@index([webAuthnUserID])
  @@map("passkeys")
}

model RedemptionCode {
  id         Int       @id @default(autoincrement())
  code       String    @unique @db.VarChar(16)
  amount     Int       @db.Int
  remark     String    @default("")
  createdAt  DateTime  @default(now())
  expiredAt  DateTime?
  redeemedAt DateTime?
  redeemerId Int?
  redeemer   User?     @relation(fields: [redeemerId], references: [id])

  @@map("redeem_codes")
}

// -----------------------------------------------------------------------------
// Enums for Transactions
// -----------------------------------------------------------------------------
enum TransactionType {
  DEPOSIT // 充值
  REFUND // 退款
  REDEMPTION // 兑换码兑换
  API_CALL // API 调用消费
  // Future types: PURCHASE_PLAN, SMS_FEE, etc.
}

enum TransactionStatus {
  PENDING // 待处理
  COMPLETED // 完成
  FAILED // 失败
  REVERTED // 已撤销 (例如，退款导致的冲销)
}

// -----------------------------------------------------------------------------
// Billing & Logging Models (最终优化版本)
// -----------------------------------------------------------------------------

// WalletTransaction - 钱包交易记录
// 记录钱包余额的每一次变动，作为所有资金流动的统一视图。
model WalletTransaction {
  id          Int               @id @default(autoincrement())
  uid         String            @unique // ULID
  wallet      Wallet            @relation(fields: [walletId], references: [id])
  walletId    Int
  amount      Decimal           @db.Decimal(16, 8) // 交易金额，正数表示入账，负数表示出账
  type        TransactionType // 交易类型：DEPOSIT, API_CALL, PURCHASE_PLAN 等
  status      TransactionStatus @default(PENDING) // 交易状态：PENDING, COMPLETED, FAILED, REVERTED
  description String            @db.VarChar(255) // 交易描述 (如 "API Call: /v1/chat/completions")
  sourceId    String            @unique @db.VarChar(36) // 具体业务详情的唯一ID(ULID 26位): 由 'type' 字段决定(如果 type 是 API_CALL，sourceId 存的就是 ApiCallBilling.eventId)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([walletId, createdAt]) // 钱包交易按时间查询
  @@index([uid]) // 快速查找交易UID
  @@index([type, sourceId]) // 方便通过类型和源ID查找交易详情
  @@map("wallet_transactions")
}

// ApiCallBilling - 每次 API 调用的计费核心数据
// 记录每次 API 调用的费用详情，由消息队列消费者服务写入和更新。
model ApiCallBilling {
  // ID
  id      Int    @id @default(autoincrement())
  eventId String @unique @db.VarChar(26) // 使用 ULID 作为全局唯一事件ID，长度 26
  userId  Int // 冗余 userId，方便查询

  // 费用
  model       String // 模型名称
  inputToken  Int     @default(0) // 输入 token 数量
  outputToken Int     @default(0) // 输出 token 数量
  cost        Decimal @default(0) @db.Decimal(16, 8) // 以模型当前价格计算的费用

  // 钱包
  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId Int

  // 请求、响应
  status     Int @default(20000) // 200xx: success, 400xx: failed, 500xx: error, 具体含义系统定义并统一使用
  durationMs Int @default(0) // 耗时(单位: ms)

  timestamp    DateTime // API 调用发生时间
  processedAt  DateTime? // 标记此计费记录何时被消费者处理并最终写入数据库
  isBilled     Boolean   @default(false) // 标记费用是否已成功扣除（针对 WalletTransaction）
  errorMessage String?   @db.Text // 如果调用失败的错误信息

  // 审计字段
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  clientIp        String   @default("0.0.0.0") @db.VarChar(45) // IPv4或IPv6
  externalTraceId String   @default("") @db.VarChar(47) // 用户请求头中传递的 X-APIGrip-ExternalTraceId(如有, 最大支持47位)

  @@index([eventId]) // 快速查询，幂等性检查
  @@index([walletId, timestamp]) // 按钱包和时间查询计费记录
  @@index([userId, timestamp]) // 按用户和时间查询计费记录
  @@map("api_call_billings")
}

// -----------------------------------------------------------------------------
// AI Models & Channels
// -----------------------------------------------------------------------------

// 模型
model AIModel {
  id          Int      @id @default(autoincrement()) // 内部id
  name        String   @unique @db.VarChar(63) // 模型名称, 请求名称, 全局唯一
  providerId  Int      @default(0) // 0: 其他, 1: OpenAI, 2: Anthropic... [这里暂时不关联表, 避免增加表复杂度]
  isActive    Boolean  @default(true) // 是否可用
  inputPrice  Decimal  @db.Decimal(16, 8) // 输入价格(单位: token) [这里不以1K/1M为单位]
  outputPrice Decimal  @db.Decimal(16, 8) // 输出价格(单位: token) [这里不以1K/1M为单位]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name, isActive])
  @@map("ai_models")
}

enum AIModelChannelStatus {
  ACTIVE // 启用
  INACTIVE // 禁用
  MAINTENANCE // 维护
}

// 模型渠道(上游, 不一定是一级供应商) - 默认渠道支持全部模型, 所以不关联模型表
model AIModelChannel {
  id        Int                  @id @default(autoincrement())
  name      String               @unique @db.VarChar(31) // 模型渠道名称, 全局唯一
  weight    Int                  @default(100) // 权重, 用于负载均衡, 默认100, 越大权重越高
  status    AIModelChannelStatus @default(ACTIVE) // 模型渠道状态
  baseUrl   String               @db.VarChar(63) // 模型渠道基础URL
  apiKey    String               @db.VarChar(63) // 模型渠道API Key
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([name, status])
  @@map("ai_model_channels")
}
