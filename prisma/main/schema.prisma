generator client {
  provider = "prisma-client"
  output   = "./generated"
}

datasource mainDb {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL_MAIN")
}

// -----------------------------------------------------------------------------
// Core User & Wallet Management Models
// -----------------------------------------------------------------------------
model User {
  id             Int            @id @default(autoincrement())
  uid            String         @unique @default(uuid())
  displayName    String?        @mainDb.VarChar(15)
  avatar         String?        @mainDb.Text
  email          String?        @unique
  phone          String?        @unique
  gitHubId       String?        @unique
  googleId       String?        @unique
  feishuId       String?        @unique
  microsoftId    String?        @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastLoginAt    DateTime?
  wallet         Wallet[] // 管理的钱包
  walletMembers  WalletMember[] // 加入的钱包
  passkeys       Passkey[] // 绑定的passkey
  createdApiKeys ApiKey[] // 创建的API Keys
  transactions   Transaction[] // 交易记录

  @@map("users")
}

model Wallet {
  id           Int            @id @default(autoincrement())
  uid          String         @unique @default(uuid())
  displayName  String         @mainDb.VarChar(15)
  balance      Decimal        @default(0) @mainDb.Decimal(15, 6)
  version      Int            @default(1) // 乐观锁
  owner        User           @relation(fields: [ownerId], references: [id])
  ownerId      Int            @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  members      WalletMember[] // 钱包成员
  apiKeys      ApiKey[] // 使用此钱包的API Keys
  transactions Transaction[] // 交易记录

  @@map("wallets")
}

model WalletMember {
  id          Int      @id @default(autoincrement())
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  walletId    Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  alias       String   @default("") @mainDb.VarChar(15) // 成员别名
  creditLimit Decimal  @default(0) @mainDb.Decimal(12, 6) // 信用额度(0表示无限制)
  creditUsed  Decimal  @default(0) @mainDb.Decimal(12, 6) // 累计消费
  isActive    Boolean  @default(true) // 是否激活(退出或被踢出时设置为false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([walletId, userId])
  @@index([userId, isActive])
  @@index([walletId, isActive])
  @@map("wallet_members")
}

model ApiKey {
  id           Int           @id @default(autoincrement())
  wallet       Wallet        @relation(fields: [walletId], references: [id])
  walletId     Int
  creator      User          @relation(fields: [creatorId], references: [id])
  creatorId    Int
  hashKey      String        @unique @mainDb.VarChar(64)
  preview      String        @mainDb.VarChar(8)
  displayName  String        @mainDb.VarChar(15)
  isActive     Boolean       @default(true)
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastUsedAt   DateTime?
  transactions Transaction[]

  @@index([hashKey, isActive]) // API key verification (most frequent query)
  @@index([creatorId, isDeleted]) // list user's API keys
  @@index([isActive]) // bloom filter rebuild
  @@map("api_keys")
}

model Passkey {
  id             String    @id @unique @mainDb.VarChar(255)
  publicKey      Bytes
  webAuthnUserID String    @mainDb.VarChar(255)
  counter        BigInt    @default(0)
  displayName    String    @default("") @mainDb.VarChar(15)
  transports     String?   @mainDb.VarChar(255)
  deviceType     String    @default("singleDevice") @mainDb.VarChar(31)
  backedUp       Boolean   @default(false)
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastUsedAt     DateTime?
  user           User      @relation(fields: [userId], references: [id])
  userId         Int

  @@unique([webAuthnUserID, userId])
  @@index([id])
  @@index([userId, isDeleted])
  @@index([id, userId, isDeleted])
  @@index([webAuthnUserID])
  @@map("passkeys")
}

model RedemptionCode {
  id               Int       @id @default(autoincrement())
  code             String    @unique @mainDb.VarChar(24) // 4 * 6
  amount           Int       @mainDb.Integer
  remark           String    @default("")
  createdAt        DateTime  @default(now())
  redeemerId       Int?      @mainDb.Integer // 兑换时更新: 冗余兑换人id
  walletId         Int?      @mainDb.Integer // 兑换时更新: 冗余钱包id
  redeemedAt       DateTime? // 兑换时更新: 兑换时间
  redeemBusinessId String?   @mainDb.VarChar(26) // 兑换时更新: 兑换码兑换的业务id(即 transaction.businessId)

  @@map("redeem_codes")
}

model Transaction {
  id           Int               @id @default(autoincrement()) // 内部自增id
  businessId   String            @unique @mainDb.VarChar(26) // 业务id, ULID
  wallet       Wallet            @relation(fields: [walletId], references: [id])
  walletId     Int               @mainDb.Integer
  user         User              @relation(fields: [userId], references: [id])
  userId       Int               @mainDb.Integer
  apiKey       ApiKey?           @relation(fields: [apiKeyId], references: [id])
  apiKeyId     Int?              @mainDb.Integer
  type         TransactionType // 交易类型
  amount       Decimal           @mainDb.Decimal(15, 6) // 金额（正=入账，负=出账）
  description  String            @mainDb.Text // 交易描述
  status       TransactionStatus @default(PENDING)
  errorMessage String?           @mainDb.Text
  createdAt    DateTime          @default(now()) // 创建时间
  updatedAt    DateTime          @updatedAt

  // 索引优化
  @@index([walletId, id(sort: Desc)]) // 钱包交易列表
  @@index([userId, id(sort: Desc)]) // 用户交易列表
  @@index([walletId, userId, id(sort: Desc)]) // 钱包成员交易列表
  @@index([status, createdAt]) // 批处理队列
  @@index([type, createdAt]) // 按类型统计
  @@map("transactions")
}

// 计费状态枚举
enum TransactionStatus {
  PENDING // 待处理（待扣费）
  PROCESSING // 处理中（扣费中）
  COMPLETED // 已完成
  FAILED // 失败
  CANCELLED // 已取消
}

enum TransactionType {
  RECHARGE // 充值
  REDEMPTION // 兑换
  CONSUME // 消费
  REFUND // 退款
  ADJUSTMENT // 调账
  SUBSCRIPTION // 订阅
  OTHER // 其他
}

// *** NOTE:  UpstreamProvider MUST keep same as detail DB ***
enum UpstreamProvider {
  OPENAI // OpenAI
  FISH_AUDIO // Fish Audio
}

model LLMModel {
  name        String   @id @mainDb.VarChar(63) // 模型名称, 请求名称, 全局唯一
  inputPrice  Decimal  @mainDb.Decimal(15, 6) // 输入价格(单位: 美元/M token)
  outputPrice Decimal  @mainDb.Decimal(15, 6) // 输出价格(单位: 美元/M token)
  releaseDate DateTime @default(now()) // 发布日期
  description String   @default("") @mainDb.VarChar(255) // 模型描述

  @@map("llm_models")
}

model AudioModel {
  name                 String           @id @mainDb.VarChar(63) // 模型名称, 全局唯一
  provider             UpstreamProvider // 模型提供商
  description          String           @default("") @mainDb.VarChar(255) // 模型描述
  pricePerMillionBytes Decimal          @default(-1) @mainDb.Decimal(15, 6) // 每百万UTF-8字符价格(单位: 美元/百万字符)
  pricePerSecond       Decimal          @default(-1) @mainDb.Decimal(15, 6) // 每秒价格(单位: 美元/秒)
  pricePerMinute       Decimal          @default(-1) @mainDb.Decimal(15, 6) // 每分钟价格(单位: 美元/分钟)
  pricePerHour         Decimal          @default(-1) @mainDb.Decimal(15, 6) // 每小时价格(单位: 美元/小时)

  @@map("audio_models")
}

// 模型渠道(上游, 不一定是一级供应商) - 默认渠道支持全部模型, 所以不关联模型表
model UpstreamConfig {
  id      Int              @id @default(autoincrement())
  name    String           @unique @mainDb.VarChar(31) // 上游名称, 全局唯一
  type    UpstreamProvider // 上游提供商类型
  weight  Int              @default(100) // 权重, 用于负载均衡, 默认100, 越大权重越高
  baseUrl String           @mainDb.VarChar(63) // 上游基础URL
  apiKey  String           @mainDb.VarChar(63) // 上游API Key

  @@map("upstream_configs")
}
