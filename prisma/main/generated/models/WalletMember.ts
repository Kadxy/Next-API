
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WalletMember` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WalletMember
 * 
 */
export type WalletMemberModel = runtime.Types.Result.DefaultSelection<Prisma.$WalletMemberPayload>

export type AggregateWalletMember = {
  _count: WalletMemberCountAggregateOutputType | null
  _avg: WalletMemberAvgAggregateOutputType | null
  _sum: WalletMemberSumAggregateOutputType | null
  _min: WalletMemberMinAggregateOutputType | null
  _max: WalletMemberMaxAggregateOutputType | null
}

export type WalletMemberAvgAggregateOutputType = {
  id: number | null
  walletId: number | null
  userId: number | null
  creditLimit: runtime.Decimal | null
  creditUsed: runtime.Decimal | null
}

export type WalletMemberSumAggregateOutputType = {
  id: number | null
  walletId: number | null
  userId: number | null
  creditLimit: runtime.Decimal | null
  creditUsed: runtime.Decimal | null
}

export type WalletMemberMinAggregateOutputType = {
  id: number | null
  walletId: number | null
  userId: number | null
  alias: string | null
  creditLimit: runtime.Decimal | null
  creditUsed: runtime.Decimal | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WalletMemberMaxAggregateOutputType = {
  id: number | null
  walletId: number | null
  userId: number | null
  alias: string | null
  creditLimit: runtime.Decimal | null
  creditUsed: runtime.Decimal | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WalletMemberCountAggregateOutputType = {
  id: number
  walletId: number
  userId: number
  alias: number
  creditLimit: number
  creditUsed: number
  isActive: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WalletMemberAvgAggregateInputType = {
  id?: true
  walletId?: true
  userId?: true
  creditLimit?: true
  creditUsed?: true
}

export type WalletMemberSumAggregateInputType = {
  id?: true
  walletId?: true
  userId?: true
  creditLimit?: true
  creditUsed?: true
}

export type WalletMemberMinAggregateInputType = {
  id?: true
  walletId?: true
  userId?: true
  alias?: true
  creditLimit?: true
  creditUsed?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type WalletMemberMaxAggregateInputType = {
  id?: true
  walletId?: true
  userId?: true
  alias?: true
  creditLimit?: true
  creditUsed?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type WalletMemberCountAggregateInputType = {
  id?: true
  walletId?: true
  userId?: true
  alias?: true
  creditLimit?: true
  creditUsed?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WalletMemberAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WalletMember to aggregate.
   */
  where?: Prisma.WalletMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletMembers to fetch.
   */
  orderBy?: Prisma.WalletMemberOrderByWithRelationInput | Prisma.WalletMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WalletMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WalletMembers
  **/
  _count?: true | WalletMemberCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WalletMemberAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WalletMemberSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WalletMemberMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WalletMemberMaxAggregateInputType
}

export type GetWalletMemberAggregateType<T extends WalletMemberAggregateArgs> = {
      [P in keyof T & keyof AggregateWalletMember]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWalletMember[P]>
    : Prisma.GetScalarType<T[P], AggregateWalletMember[P]>
}




export type WalletMemberGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WalletMemberWhereInput
  orderBy?: Prisma.WalletMemberOrderByWithAggregationInput | Prisma.WalletMemberOrderByWithAggregationInput[]
  by: Prisma.WalletMemberScalarFieldEnum[] | Prisma.WalletMemberScalarFieldEnum
  having?: Prisma.WalletMemberScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WalletMemberCountAggregateInputType | true
  _avg?: WalletMemberAvgAggregateInputType
  _sum?: WalletMemberSumAggregateInputType
  _min?: WalletMemberMinAggregateInputType
  _max?: WalletMemberMaxAggregateInputType
}

export type WalletMemberGroupByOutputType = {
  id: number
  walletId: number
  userId: number
  alias: string
  creditLimit: runtime.Decimal
  creditUsed: runtime.Decimal
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  _count: WalletMemberCountAggregateOutputType | null
  _avg: WalletMemberAvgAggregateOutputType | null
  _sum: WalletMemberSumAggregateOutputType | null
  _min: WalletMemberMinAggregateOutputType | null
  _max: WalletMemberMaxAggregateOutputType | null
}

type GetWalletMemberGroupByPayload<T extends WalletMemberGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WalletMemberGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WalletMemberGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WalletMemberGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WalletMemberGroupByOutputType[P]>
      }
    >
  > 



export type WalletMemberWhereInput = {
  AND?: Prisma.WalletMemberWhereInput | Prisma.WalletMemberWhereInput[]
  OR?: Prisma.WalletMemberWhereInput[]
  NOT?: Prisma.WalletMemberWhereInput | Prisma.WalletMemberWhereInput[]
  id?: Prisma.IntFilter<"WalletMember"> | number
  walletId?: Prisma.IntFilter<"WalletMember"> | number
  userId?: Prisma.IntFilter<"WalletMember"> | number
  alias?: Prisma.StringFilter<"WalletMember"> | string
  creditLimit?: Prisma.DecimalFilter<"WalletMember"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFilter<"WalletMember"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFilter<"WalletMember"> | boolean
  createdAt?: Prisma.DateTimeFilter<"WalletMember"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletMember"> | Date | string
  wallet?: Prisma.XOR<Prisma.WalletScalarRelationFilter, Prisma.WalletWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type WalletMemberOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  creditLimit?: Prisma.SortOrder
  creditUsed?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  wallet?: Prisma.WalletOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type WalletMemberWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  walletId_userId?: Prisma.WalletMemberWalletIdUserIdCompoundUniqueInput
  AND?: Prisma.WalletMemberWhereInput | Prisma.WalletMemberWhereInput[]
  OR?: Prisma.WalletMemberWhereInput[]
  NOT?: Prisma.WalletMemberWhereInput | Prisma.WalletMemberWhereInput[]
  walletId?: Prisma.IntFilter<"WalletMember"> | number
  userId?: Prisma.IntFilter<"WalletMember"> | number
  alias?: Prisma.StringFilter<"WalletMember"> | string
  creditLimit?: Prisma.DecimalFilter<"WalletMember"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFilter<"WalletMember"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFilter<"WalletMember"> | boolean
  createdAt?: Prisma.DateTimeFilter<"WalletMember"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletMember"> | Date | string
  wallet?: Prisma.XOR<Prisma.WalletScalarRelationFilter, Prisma.WalletWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "walletId_userId">

export type WalletMemberOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  creditLimit?: Prisma.SortOrder
  creditUsed?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WalletMemberCountOrderByAggregateInput
  _avg?: Prisma.WalletMemberAvgOrderByAggregateInput
  _max?: Prisma.WalletMemberMaxOrderByAggregateInput
  _min?: Prisma.WalletMemberMinOrderByAggregateInput
  _sum?: Prisma.WalletMemberSumOrderByAggregateInput
}

export type WalletMemberScalarWhereWithAggregatesInput = {
  AND?: Prisma.WalletMemberScalarWhereWithAggregatesInput | Prisma.WalletMemberScalarWhereWithAggregatesInput[]
  OR?: Prisma.WalletMemberScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WalletMemberScalarWhereWithAggregatesInput | Prisma.WalletMemberScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WalletMember"> | number
  walletId?: Prisma.IntWithAggregatesFilter<"WalletMember"> | number
  userId?: Prisma.IntWithAggregatesFilter<"WalletMember"> | number
  alias?: Prisma.StringWithAggregatesFilter<"WalletMember"> | string
  creditLimit?: Prisma.DecimalWithAggregatesFilter<"WalletMember"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalWithAggregatesFilter<"WalletMember"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolWithAggregatesFilter<"WalletMember"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WalletMember"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WalletMember"> | Date | string
}

export type WalletMemberCreateInput = {
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  wallet: Prisma.WalletCreateNestedOneWithoutMembersInput
  user: Prisma.UserCreateNestedOneWithoutWalletMembersInput
}

export type WalletMemberUncheckedCreateInput = {
  id?: number
  walletId: number
  userId: number
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletMemberUpdateInput = {
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  wallet?: Prisma.WalletUpdateOneRequiredWithoutMembersNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutWalletMembersNestedInput
}

export type WalletMemberUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  walletId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletMemberCreateManyInput = {
  id?: number
  walletId: number
  userId: number
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletMemberUpdateManyMutationInput = {
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletMemberUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  walletId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletMemberListRelationFilter = {
  every?: Prisma.WalletMemberWhereInput
  some?: Prisma.WalletMemberWhereInput
  none?: Prisma.WalletMemberWhereInput
}

export type WalletMemberOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WalletMemberWalletIdUserIdCompoundUniqueInput = {
  walletId: number
  userId: number
}

export type WalletMemberCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  creditLimit?: Prisma.SortOrder
  creditUsed?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletMemberAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  creditLimit?: Prisma.SortOrder
  creditUsed?: Prisma.SortOrder
}

export type WalletMemberMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  creditLimit?: Prisma.SortOrder
  creditUsed?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletMemberMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  creditLimit?: Prisma.SortOrder
  creditUsed?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WalletMemberSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  walletId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  creditLimit?: Prisma.SortOrder
  creditUsed?: Prisma.SortOrder
}

export type WalletMemberCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WalletMemberCreateWithoutUserInput, Prisma.WalletMemberUncheckedCreateWithoutUserInput> | Prisma.WalletMemberCreateWithoutUserInput[] | Prisma.WalletMemberUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WalletMemberCreateOrConnectWithoutUserInput | Prisma.WalletMemberCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WalletMemberCreateManyUserInputEnvelope
  connect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
}

export type WalletMemberUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WalletMemberCreateWithoutUserInput, Prisma.WalletMemberUncheckedCreateWithoutUserInput> | Prisma.WalletMemberCreateWithoutUserInput[] | Prisma.WalletMemberUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WalletMemberCreateOrConnectWithoutUserInput | Prisma.WalletMemberCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WalletMemberCreateManyUserInputEnvelope
  connect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
}

export type WalletMemberUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WalletMemberCreateWithoutUserInput, Prisma.WalletMemberUncheckedCreateWithoutUserInput> | Prisma.WalletMemberCreateWithoutUserInput[] | Prisma.WalletMemberUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WalletMemberCreateOrConnectWithoutUserInput | Prisma.WalletMemberCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WalletMemberUpsertWithWhereUniqueWithoutUserInput | Prisma.WalletMemberUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WalletMemberCreateManyUserInputEnvelope
  set?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  disconnect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  delete?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  connect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  update?: Prisma.WalletMemberUpdateWithWhereUniqueWithoutUserInput | Prisma.WalletMemberUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WalletMemberUpdateManyWithWhereWithoutUserInput | Prisma.WalletMemberUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WalletMemberScalarWhereInput | Prisma.WalletMemberScalarWhereInput[]
}

export type WalletMemberUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WalletMemberCreateWithoutUserInput, Prisma.WalletMemberUncheckedCreateWithoutUserInput> | Prisma.WalletMemberCreateWithoutUserInput[] | Prisma.WalletMemberUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WalletMemberCreateOrConnectWithoutUserInput | Prisma.WalletMemberCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WalletMemberUpsertWithWhereUniqueWithoutUserInput | Prisma.WalletMemberUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WalletMemberCreateManyUserInputEnvelope
  set?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  disconnect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  delete?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  connect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  update?: Prisma.WalletMemberUpdateWithWhereUniqueWithoutUserInput | Prisma.WalletMemberUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WalletMemberUpdateManyWithWhereWithoutUserInput | Prisma.WalletMemberUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WalletMemberScalarWhereInput | Prisma.WalletMemberScalarWhereInput[]
}

export type WalletMemberCreateNestedManyWithoutWalletInput = {
  create?: Prisma.XOR<Prisma.WalletMemberCreateWithoutWalletInput, Prisma.WalletMemberUncheckedCreateWithoutWalletInput> | Prisma.WalletMemberCreateWithoutWalletInput[] | Prisma.WalletMemberUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.WalletMemberCreateOrConnectWithoutWalletInput | Prisma.WalletMemberCreateOrConnectWithoutWalletInput[]
  createMany?: Prisma.WalletMemberCreateManyWalletInputEnvelope
  connect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
}

export type WalletMemberUncheckedCreateNestedManyWithoutWalletInput = {
  create?: Prisma.XOR<Prisma.WalletMemberCreateWithoutWalletInput, Prisma.WalletMemberUncheckedCreateWithoutWalletInput> | Prisma.WalletMemberCreateWithoutWalletInput[] | Prisma.WalletMemberUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.WalletMemberCreateOrConnectWithoutWalletInput | Prisma.WalletMemberCreateOrConnectWithoutWalletInput[]
  createMany?: Prisma.WalletMemberCreateManyWalletInputEnvelope
  connect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
}

export type WalletMemberUpdateManyWithoutWalletNestedInput = {
  create?: Prisma.XOR<Prisma.WalletMemberCreateWithoutWalletInput, Prisma.WalletMemberUncheckedCreateWithoutWalletInput> | Prisma.WalletMemberCreateWithoutWalletInput[] | Prisma.WalletMemberUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.WalletMemberCreateOrConnectWithoutWalletInput | Prisma.WalletMemberCreateOrConnectWithoutWalletInput[]
  upsert?: Prisma.WalletMemberUpsertWithWhereUniqueWithoutWalletInput | Prisma.WalletMemberUpsertWithWhereUniqueWithoutWalletInput[]
  createMany?: Prisma.WalletMemberCreateManyWalletInputEnvelope
  set?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  disconnect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  delete?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  connect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  update?: Prisma.WalletMemberUpdateWithWhereUniqueWithoutWalletInput | Prisma.WalletMemberUpdateWithWhereUniqueWithoutWalletInput[]
  updateMany?: Prisma.WalletMemberUpdateManyWithWhereWithoutWalletInput | Prisma.WalletMemberUpdateManyWithWhereWithoutWalletInput[]
  deleteMany?: Prisma.WalletMemberScalarWhereInput | Prisma.WalletMemberScalarWhereInput[]
}

export type WalletMemberUncheckedUpdateManyWithoutWalletNestedInput = {
  create?: Prisma.XOR<Prisma.WalletMemberCreateWithoutWalletInput, Prisma.WalletMemberUncheckedCreateWithoutWalletInput> | Prisma.WalletMemberCreateWithoutWalletInput[] | Prisma.WalletMemberUncheckedCreateWithoutWalletInput[]
  connectOrCreate?: Prisma.WalletMemberCreateOrConnectWithoutWalletInput | Prisma.WalletMemberCreateOrConnectWithoutWalletInput[]
  upsert?: Prisma.WalletMemberUpsertWithWhereUniqueWithoutWalletInput | Prisma.WalletMemberUpsertWithWhereUniqueWithoutWalletInput[]
  createMany?: Prisma.WalletMemberCreateManyWalletInputEnvelope
  set?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  disconnect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  delete?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  connect?: Prisma.WalletMemberWhereUniqueInput | Prisma.WalletMemberWhereUniqueInput[]
  update?: Prisma.WalletMemberUpdateWithWhereUniqueWithoutWalletInput | Prisma.WalletMemberUpdateWithWhereUniqueWithoutWalletInput[]
  updateMany?: Prisma.WalletMemberUpdateManyWithWhereWithoutWalletInput | Prisma.WalletMemberUpdateManyWithWhereWithoutWalletInput[]
  deleteMany?: Prisma.WalletMemberScalarWhereInput | Prisma.WalletMemberScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type WalletMemberCreateWithoutUserInput = {
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  wallet: Prisma.WalletCreateNestedOneWithoutMembersInput
}

export type WalletMemberUncheckedCreateWithoutUserInput = {
  id?: number
  walletId: number
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletMemberCreateOrConnectWithoutUserInput = {
  where: Prisma.WalletMemberWhereUniqueInput
  create: Prisma.XOR<Prisma.WalletMemberCreateWithoutUserInput, Prisma.WalletMemberUncheckedCreateWithoutUserInput>
}

export type WalletMemberCreateManyUserInputEnvelope = {
  data: Prisma.WalletMemberCreateManyUserInput | Prisma.WalletMemberCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type WalletMemberUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.WalletMemberWhereUniqueInput
  update: Prisma.XOR<Prisma.WalletMemberUpdateWithoutUserInput, Prisma.WalletMemberUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.WalletMemberCreateWithoutUserInput, Prisma.WalletMemberUncheckedCreateWithoutUserInput>
}

export type WalletMemberUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.WalletMemberWhereUniqueInput
  data: Prisma.XOR<Prisma.WalletMemberUpdateWithoutUserInput, Prisma.WalletMemberUncheckedUpdateWithoutUserInput>
}

export type WalletMemberUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.WalletMemberScalarWhereInput
  data: Prisma.XOR<Prisma.WalletMemberUpdateManyMutationInput, Prisma.WalletMemberUncheckedUpdateManyWithoutUserInput>
}

export type WalletMemberScalarWhereInput = {
  AND?: Prisma.WalletMemberScalarWhereInput | Prisma.WalletMemberScalarWhereInput[]
  OR?: Prisma.WalletMemberScalarWhereInput[]
  NOT?: Prisma.WalletMemberScalarWhereInput | Prisma.WalletMemberScalarWhereInput[]
  id?: Prisma.IntFilter<"WalletMember"> | number
  walletId?: Prisma.IntFilter<"WalletMember"> | number
  userId?: Prisma.IntFilter<"WalletMember"> | number
  alias?: Prisma.StringFilter<"WalletMember"> | string
  creditLimit?: Prisma.DecimalFilter<"WalletMember"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFilter<"WalletMember"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFilter<"WalletMember"> | boolean
  createdAt?: Prisma.DateTimeFilter<"WalletMember"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WalletMember"> | Date | string
}

export type WalletMemberCreateWithoutWalletInput = {
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutWalletMembersInput
}

export type WalletMemberUncheckedCreateWithoutWalletInput = {
  id?: number
  userId: number
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletMemberCreateOrConnectWithoutWalletInput = {
  where: Prisma.WalletMemberWhereUniqueInput
  create: Prisma.XOR<Prisma.WalletMemberCreateWithoutWalletInput, Prisma.WalletMemberUncheckedCreateWithoutWalletInput>
}

export type WalletMemberCreateManyWalletInputEnvelope = {
  data: Prisma.WalletMemberCreateManyWalletInput | Prisma.WalletMemberCreateManyWalletInput[]
  skipDuplicates?: boolean
}

export type WalletMemberUpsertWithWhereUniqueWithoutWalletInput = {
  where: Prisma.WalletMemberWhereUniqueInput
  update: Prisma.XOR<Prisma.WalletMemberUpdateWithoutWalletInput, Prisma.WalletMemberUncheckedUpdateWithoutWalletInput>
  create: Prisma.XOR<Prisma.WalletMemberCreateWithoutWalletInput, Prisma.WalletMemberUncheckedCreateWithoutWalletInput>
}

export type WalletMemberUpdateWithWhereUniqueWithoutWalletInput = {
  where: Prisma.WalletMemberWhereUniqueInput
  data: Prisma.XOR<Prisma.WalletMemberUpdateWithoutWalletInput, Prisma.WalletMemberUncheckedUpdateWithoutWalletInput>
}

export type WalletMemberUpdateManyWithWhereWithoutWalletInput = {
  where: Prisma.WalletMemberScalarWhereInput
  data: Prisma.XOR<Prisma.WalletMemberUpdateManyMutationInput, Prisma.WalletMemberUncheckedUpdateManyWithoutWalletInput>
}

export type WalletMemberCreateManyUserInput = {
  id?: number
  walletId: number
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletMemberUpdateWithoutUserInput = {
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  wallet?: Prisma.WalletUpdateOneRequiredWithoutMembersNestedInput
}

export type WalletMemberUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  walletId?: Prisma.IntFieldUpdateOperationsInput | number
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletMemberUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  walletId?: Prisma.IntFieldUpdateOperationsInput | number
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletMemberCreateManyWalletInput = {
  id?: number
  userId: number
  alias?: string
  creditLimit?: runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WalletMemberUpdateWithoutWalletInput = {
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutWalletMembersNestedInput
}

export type WalletMemberUncheckedUpdateWithoutWalletInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WalletMemberUncheckedUpdateManyWithoutWalletInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  creditLimit?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  creditUsed?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WalletMemberSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  walletId?: boolean
  userId?: boolean
  alias?: boolean
  creditLimit?: boolean
  creditUsed?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walletMember"]>

export type WalletMemberSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  walletId?: boolean
  userId?: boolean
  alias?: boolean
  creditLimit?: boolean
  creditUsed?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walletMember"]>

export type WalletMemberSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  walletId?: boolean
  userId?: boolean
  alias?: boolean
  creditLimit?: boolean
  creditUsed?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["walletMember"]>

export type WalletMemberSelectScalar = {
  id?: boolean
  walletId?: boolean
  userId?: boolean
  alias?: boolean
  creditLimit?: boolean
  creditUsed?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WalletMemberOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "walletId" | "userId" | "alias" | "creditLimit" | "creditUsed" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["walletMember"]>
export type WalletMemberInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type WalletMemberIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type WalletMemberIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wallet?: boolean | Prisma.WalletDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $WalletMemberPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WalletMember"
  objects: {
    wallet: Prisma.$WalletPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    walletId: number
    userId: number
    alias: string
    creditLimit: runtime.Decimal
    creditUsed: runtime.Decimal
    isActive: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["walletMember"]>
  composites: {}
}

export type WalletMemberGetPayload<S extends boolean | null | undefined | WalletMemberDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload, S>

export type WalletMemberCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WalletMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WalletMemberCountAggregateInputType | true
  }

export interface WalletMemberDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletMember'], meta: { name: 'WalletMember' } }
  /**
   * Find zero or one WalletMember that matches the filter.
   * @param {WalletMemberFindUniqueArgs} args - Arguments to find a WalletMember
   * @example
   * // Get one WalletMember
   * const walletMember = await prisma.walletMember.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WalletMemberFindUniqueArgs>(args: Prisma.SelectSubset<T, WalletMemberFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WalletMemberClient<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WalletMember that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WalletMemberFindUniqueOrThrowArgs} args - Arguments to find a WalletMember
   * @example
   * // Get one WalletMember
   * const walletMember = await prisma.walletMember.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WalletMemberFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WalletMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WalletMemberClient<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WalletMember that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletMemberFindFirstArgs} args - Arguments to find a WalletMember
   * @example
   * // Get one WalletMember
   * const walletMember = await prisma.walletMember.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WalletMemberFindFirstArgs>(args?: Prisma.SelectSubset<T, WalletMemberFindFirstArgs<ExtArgs>>): Prisma.Prisma__WalletMemberClient<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WalletMember that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletMemberFindFirstOrThrowArgs} args - Arguments to find a WalletMember
   * @example
   * // Get one WalletMember
   * const walletMember = await prisma.walletMember.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WalletMemberFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WalletMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WalletMemberClient<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WalletMembers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletMemberFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WalletMembers
   * const walletMembers = await prisma.walletMember.findMany()
   * 
   * // Get first 10 WalletMembers
   * const walletMembers = await prisma.walletMember.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const walletMemberWithIdOnly = await prisma.walletMember.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WalletMemberFindManyArgs>(args?: Prisma.SelectSubset<T, WalletMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WalletMember.
   * @param {WalletMemberCreateArgs} args - Arguments to create a WalletMember.
   * @example
   * // Create one WalletMember
   * const WalletMember = await prisma.walletMember.create({
   *   data: {
   *     // ... data to create a WalletMember
   *   }
   * })
   * 
   */
  create<T extends WalletMemberCreateArgs>(args: Prisma.SelectSubset<T, WalletMemberCreateArgs<ExtArgs>>): Prisma.Prisma__WalletMemberClient<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WalletMembers.
   * @param {WalletMemberCreateManyArgs} args - Arguments to create many WalletMembers.
   * @example
   * // Create many WalletMembers
   * const walletMember = await prisma.walletMember.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WalletMemberCreateManyArgs>(args?: Prisma.SelectSubset<T, WalletMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WalletMembers and returns the data saved in the database.
   * @param {WalletMemberCreateManyAndReturnArgs} args - Arguments to create many WalletMembers.
   * @example
   * // Create many WalletMembers
   * const walletMember = await prisma.walletMember.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WalletMembers and only return the `id`
   * const walletMemberWithIdOnly = await prisma.walletMember.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WalletMemberCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WalletMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WalletMember.
   * @param {WalletMemberDeleteArgs} args - Arguments to delete one WalletMember.
   * @example
   * // Delete one WalletMember
   * const WalletMember = await prisma.walletMember.delete({
   *   where: {
   *     // ... filter to delete one WalletMember
   *   }
   * })
   * 
   */
  delete<T extends WalletMemberDeleteArgs>(args: Prisma.SelectSubset<T, WalletMemberDeleteArgs<ExtArgs>>): Prisma.Prisma__WalletMemberClient<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WalletMember.
   * @param {WalletMemberUpdateArgs} args - Arguments to update one WalletMember.
   * @example
   * // Update one WalletMember
   * const walletMember = await prisma.walletMember.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WalletMemberUpdateArgs>(args: Prisma.SelectSubset<T, WalletMemberUpdateArgs<ExtArgs>>): Prisma.Prisma__WalletMemberClient<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WalletMembers.
   * @param {WalletMemberDeleteManyArgs} args - Arguments to filter WalletMembers to delete.
   * @example
   * // Delete a few WalletMembers
   * const { count } = await prisma.walletMember.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WalletMemberDeleteManyArgs>(args?: Prisma.SelectSubset<T, WalletMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WalletMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletMemberUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WalletMembers
   * const walletMember = await prisma.walletMember.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WalletMemberUpdateManyArgs>(args: Prisma.SelectSubset<T, WalletMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WalletMembers and returns the data updated in the database.
   * @param {WalletMemberUpdateManyAndReturnArgs} args - Arguments to update many WalletMembers.
   * @example
   * // Update many WalletMembers
   * const walletMember = await prisma.walletMember.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WalletMembers and only return the `id`
   * const walletMemberWithIdOnly = await prisma.walletMember.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WalletMemberUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WalletMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WalletMember.
   * @param {WalletMemberUpsertArgs} args - Arguments to update or create a WalletMember.
   * @example
   * // Update or create a WalletMember
   * const walletMember = await prisma.walletMember.upsert({
   *   create: {
   *     // ... data to create a WalletMember
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WalletMember we want to update
   *   }
   * })
   */
  upsert<T extends WalletMemberUpsertArgs>(args: Prisma.SelectSubset<T, WalletMemberUpsertArgs<ExtArgs>>): Prisma.Prisma__WalletMemberClient<runtime.Types.Result.GetResult<Prisma.$WalletMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WalletMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletMemberCountArgs} args - Arguments to filter WalletMembers to count.
   * @example
   * // Count the number of WalletMembers
   * const count = await prisma.walletMember.count({
   *   where: {
   *     // ... the filter for the WalletMembers we want to count
   *   }
   * })
  **/
  count<T extends WalletMemberCountArgs>(
    args?: Prisma.Subset<T, WalletMemberCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WalletMemberCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WalletMember.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WalletMemberAggregateArgs>(args: Prisma.Subset<T, WalletMemberAggregateArgs>): Prisma.PrismaPromise<GetWalletMemberAggregateType<T>>

  /**
   * Group by WalletMember.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WalletMemberGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WalletMemberGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WalletMemberGroupByArgs['orderBy'] }
      : { orderBy?: WalletMemberGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WalletMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WalletMember model
 */
readonly fields: WalletMemberFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WalletMember.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WalletMemberClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  wallet<T extends Prisma.WalletDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WalletDefaultArgs<ExtArgs>>): Prisma.Prisma__WalletClient<runtime.Types.Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WalletMember model
 */
export interface WalletMemberFieldRefs {
  readonly id: Prisma.FieldRef<"WalletMember", 'Int'>
  readonly walletId: Prisma.FieldRef<"WalletMember", 'Int'>
  readonly userId: Prisma.FieldRef<"WalletMember", 'Int'>
  readonly alias: Prisma.FieldRef<"WalletMember", 'String'>
  readonly creditLimit: Prisma.FieldRef<"WalletMember", 'Decimal'>
  readonly creditUsed: Prisma.FieldRef<"WalletMember", 'Decimal'>
  readonly isActive: Prisma.FieldRef<"WalletMember", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"WalletMember", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WalletMember", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WalletMember findUnique
 */
export type WalletMemberFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * Filter, which WalletMember to fetch.
   */
  where: Prisma.WalletMemberWhereUniqueInput
}

/**
 * WalletMember findUniqueOrThrow
 */
export type WalletMemberFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * Filter, which WalletMember to fetch.
   */
  where: Prisma.WalletMemberWhereUniqueInput
}

/**
 * WalletMember findFirst
 */
export type WalletMemberFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * Filter, which WalletMember to fetch.
   */
  where?: Prisma.WalletMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletMembers to fetch.
   */
  orderBy?: Prisma.WalletMemberOrderByWithRelationInput | Prisma.WalletMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WalletMembers.
   */
  cursor?: Prisma.WalletMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WalletMembers.
   */
  distinct?: Prisma.WalletMemberScalarFieldEnum | Prisma.WalletMemberScalarFieldEnum[]
}

/**
 * WalletMember findFirstOrThrow
 */
export type WalletMemberFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * Filter, which WalletMember to fetch.
   */
  where?: Prisma.WalletMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletMembers to fetch.
   */
  orderBy?: Prisma.WalletMemberOrderByWithRelationInput | Prisma.WalletMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WalletMembers.
   */
  cursor?: Prisma.WalletMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WalletMembers.
   */
  distinct?: Prisma.WalletMemberScalarFieldEnum | Prisma.WalletMemberScalarFieldEnum[]
}

/**
 * WalletMember findMany
 */
export type WalletMemberFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * Filter, which WalletMembers to fetch.
   */
  where?: Prisma.WalletMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WalletMembers to fetch.
   */
  orderBy?: Prisma.WalletMemberOrderByWithRelationInput | Prisma.WalletMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WalletMembers.
   */
  cursor?: Prisma.WalletMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WalletMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WalletMembers.
   */
  skip?: number
  distinct?: Prisma.WalletMemberScalarFieldEnum | Prisma.WalletMemberScalarFieldEnum[]
}

/**
 * WalletMember create
 */
export type WalletMemberCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * The data needed to create a WalletMember.
   */
  data: Prisma.XOR<Prisma.WalletMemberCreateInput, Prisma.WalletMemberUncheckedCreateInput>
}

/**
 * WalletMember createMany
 */
export type WalletMemberCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WalletMembers.
   */
  data: Prisma.WalletMemberCreateManyInput | Prisma.WalletMemberCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WalletMember createManyAndReturn
 */
export type WalletMemberCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * The data used to create many WalletMembers.
   */
  data: Prisma.WalletMemberCreateManyInput | Prisma.WalletMemberCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WalletMember update
 */
export type WalletMemberUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * The data needed to update a WalletMember.
   */
  data: Prisma.XOR<Prisma.WalletMemberUpdateInput, Prisma.WalletMemberUncheckedUpdateInput>
  /**
   * Choose, which WalletMember to update.
   */
  where: Prisma.WalletMemberWhereUniqueInput
}

/**
 * WalletMember updateMany
 */
export type WalletMemberUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WalletMembers.
   */
  data: Prisma.XOR<Prisma.WalletMemberUpdateManyMutationInput, Prisma.WalletMemberUncheckedUpdateManyInput>
  /**
   * Filter which WalletMembers to update
   */
  where?: Prisma.WalletMemberWhereInput
  /**
   * Limit how many WalletMembers to update.
   */
  limit?: number
}

/**
 * WalletMember updateManyAndReturn
 */
export type WalletMemberUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * The data used to update WalletMembers.
   */
  data: Prisma.XOR<Prisma.WalletMemberUpdateManyMutationInput, Prisma.WalletMemberUncheckedUpdateManyInput>
  /**
   * Filter which WalletMembers to update
   */
  where?: Prisma.WalletMemberWhereInput
  /**
   * Limit how many WalletMembers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WalletMember upsert
 */
export type WalletMemberUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * The filter to search for the WalletMember to update in case it exists.
   */
  where: Prisma.WalletMemberWhereUniqueInput
  /**
   * In case the WalletMember found by the `where` argument doesn't exist, create a new WalletMember with this data.
   */
  create: Prisma.XOR<Prisma.WalletMemberCreateInput, Prisma.WalletMemberUncheckedCreateInput>
  /**
   * In case the WalletMember was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WalletMemberUpdateInput, Prisma.WalletMemberUncheckedUpdateInput>
}

/**
 * WalletMember delete
 */
export type WalletMemberDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
  /**
   * Filter which WalletMember to delete.
   */
  where: Prisma.WalletMemberWhereUniqueInput
}

/**
 * WalletMember deleteMany
 */
export type WalletMemberDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WalletMembers to delete
   */
  where?: Prisma.WalletMemberWhereInput
  /**
   * Limit how many WalletMembers to delete.
   */
  limit?: number
}

/**
 * WalletMember without action
 */
export type WalletMemberDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WalletMember
   */
  select?: Prisma.WalletMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WalletMember
   */
  omit?: Prisma.WalletMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WalletMemberInclude<ExtArgs> | null
}
