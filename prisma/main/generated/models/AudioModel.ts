
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AudioModel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AudioModel
 * 
 */
export type AudioModelModel = runtime.Types.Result.DefaultSelection<Prisma.$AudioModelPayload>

export type AggregateAudioModel = {
  _count: AudioModelCountAggregateOutputType | null
  _avg: AudioModelAvgAggregateOutputType | null
  _sum: AudioModelSumAggregateOutputType | null
  _min: AudioModelMinAggregateOutputType | null
  _max: AudioModelMaxAggregateOutputType | null
}

export type AudioModelAvgAggregateOutputType = {
  pricePerMillionBytes: runtime.Decimal | null
  pricePerSecond: runtime.Decimal | null
  pricePerMinute: runtime.Decimal | null
  pricePerHour: runtime.Decimal | null
}

export type AudioModelSumAggregateOutputType = {
  pricePerMillionBytes: runtime.Decimal | null
  pricePerSecond: runtime.Decimal | null
  pricePerMinute: runtime.Decimal | null
  pricePerHour: runtime.Decimal | null
}

export type AudioModelMinAggregateOutputType = {
  name: string | null
  provider: $Enums.UpstreamProvider | null
  description: string | null
  pricePerMillionBytes: runtime.Decimal | null
  pricePerSecond: runtime.Decimal | null
  pricePerMinute: runtime.Decimal | null
  pricePerHour: runtime.Decimal | null
}

export type AudioModelMaxAggregateOutputType = {
  name: string | null
  provider: $Enums.UpstreamProvider | null
  description: string | null
  pricePerMillionBytes: runtime.Decimal | null
  pricePerSecond: runtime.Decimal | null
  pricePerMinute: runtime.Decimal | null
  pricePerHour: runtime.Decimal | null
}

export type AudioModelCountAggregateOutputType = {
  name: number
  provider: number
  description: number
  pricePerMillionBytes: number
  pricePerSecond: number
  pricePerMinute: number
  pricePerHour: number
  _all: number
}


export type AudioModelAvgAggregateInputType = {
  pricePerMillionBytes?: true
  pricePerSecond?: true
  pricePerMinute?: true
  pricePerHour?: true
}

export type AudioModelSumAggregateInputType = {
  pricePerMillionBytes?: true
  pricePerSecond?: true
  pricePerMinute?: true
  pricePerHour?: true
}

export type AudioModelMinAggregateInputType = {
  name?: true
  provider?: true
  description?: true
  pricePerMillionBytes?: true
  pricePerSecond?: true
  pricePerMinute?: true
  pricePerHour?: true
}

export type AudioModelMaxAggregateInputType = {
  name?: true
  provider?: true
  description?: true
  pricePerMillionBytes?: true
  pricePerSecond?: true
  pricePerMinute?: true
  pricePerHour?: true
}

export type AudioModelCountAggregateInputType = {
  name?: true
  provider?: true
  description?: true
  pricePerMillionBytes?: true
  pricePerSecond?: true
  pricePerMinute?: true
  pricePerHour?: true
  _all?: true
}

export type AudioModelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AudioModel to aggregate.
   */
  where?: Prisma.AudioModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AudioModels to fetch.
   */
  orderBy?: Prisma.AudioModelOrderByWithRelationInput | Prisma.AudioModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AudioModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AudioModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AudioModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AudioModels
  **/
  _count?: true | AudioModelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AudioModelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AudioModelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AudioModelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AudioModelMaxAggregateInputType
}

export type GetAudioModelAggregateType<T extends AudioModelAggregateArgs> = {
      [P in keyof T & keyof AggregateAudioModel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAudioModel[P]>
    : Prisma.GetScalarType<T[P], AggregateAudioModel[P]>
}




export type AudioModelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AudioModelWhereInput
  orderBy?: Prisma.AudioModelOrderByWithAggregationInput | Prisma.AudioModelOrderByWithAggregationInput[]
  by: Prisma.AudioModelScalarFieldEnum[] | Prisma.AudioModelScalarFieldEnum
  having?: Prisma.AudioModelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AudioModelCountAggregateInputType | true
  _avg?: AudioModelAvgAggregateInputType
  _sum?: AudioModelSumAggregateInputType
  _min?: AudioModelMinAggregateInputType
  _max?: AudioModelMaxAggregateInputType
}

export type AudioModelGroupByOutputType = {
  name: string
  provider: $Enums.UpstreamProvider
  description: string
  pricePerMillionBytes: runtime.Decimal
  pricePerSecond: runtime.Decimal
  pricePerMinute: runtime.Decimal
  pricePerHour: runtime.Decimal
  _count: AudioModelCountAggregateOutputType | null
  _avg: AudioModelAvgAggregateOutputType | null
  _sum: AudioModelSumAggregateOutputType | null
  _min: AudioModelMinAggregateOutputType | null
  _max: AudioModelMaxAggregateOutputType | null
}

type GetAudioModelGroupByPayload<T extends AudioModelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AudioModelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AudioModelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AudioModelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AudioModelGroupByOutputType[P]>
      }
    >
  > 



export type AudioModelWhereInput = {
  AND?: Prisma.AudioModelWhereInput | Prisma.AudioModelWhereInput[]
  OR?: Prisma.AudioModelWhereInput[]
  NOT?: Prisma.AudioModelWhereInput | Prisma.AudioModelWhereInput[]
  name?: Prisma.StringFilter<"AudioModel"> | string
  provider?: Prisma.EnumUpstreamProviderFilter<"AudioModel"> | $Enums.UpstreamProvider
  description?: Prisma.StringFilter<"AudioModel"> | string
  pricePerMillionBytes?: Prisma.DecimalFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: Prisma.DecimalFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: Prisma.DecimalFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: Prisma.DecimalFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelOrderByWithRelationInput = {
  name?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  description?: Prisma.SortOrder
  pricePerMillionBytes?: Prisma.SortOrder
  pricePerSecond?: Prisma.SortOrder
  pricePerMinute?: Prisma.SortOrder
  pricePerHour?: Prisma.SortOrder
}

export type AudioModelWhereUniqueInput = Prisma.AtLeast<{
  name?: string
  AND?: Prisma.AudioModelWhereInput | Prisma.AudioModelWhereInput[]
  OR?: Prisma.AudioModelWhereInput[]
  NOT?: Prisma.AudioModelWhereInput | Prisma.AudioModelWhereInput[]
  provider?: Prisma.EnumUpstreamProviderFilter<"AudioModel"> | $Enums.UpstreamProvider
  description?: Prisma.StringFilter<"AudioModel"> | string
  pricePerMillionBytes?: Prisma.DecimalFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: Prisma.DecimalFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: Prisma.DecimalFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: Prisma.DecimalFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}, "name">

export type AudioModelOrderByWithAggregationInput = {
  name?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  description?: Prisma.SortOrder
  pricePerMillionBytes?: Prisma.SortOrder
  pricePerSecond?: Prisma.SortOrder
  pricePerMinute?: Prisma.SortOrder
  pricePerHour?: Prisma.SortOrder
  _count?: Prisma.AudioModelCountOrderByAggregateInput
  _avg?: Prisma.AudioModelAvgOrderByAggregateInput
  _max?: Prisma.AudioModelMaxOrderByAggregateInput
  _min?: Prisma.AudioModelMinOrderByAggregateInput
  _sum?: Prisma.AudioModelSumOrderByAggregateInput
}

export type AudioModelScalarWhereWithAggregatesInput = {
  AND?: Prisma.AudioModelScalarWhereWithAggregatesInput | Prisma.AudioModelScalarWhereWithAggregatesInput[]
  OR?: Prisma.AudioModelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AudioModelScalarWhereWithAggregatesInput | Prisma.AudioModelScalarWhereWithAggregatesInput[]
  name?: Prisma.StringWithAggregatesFilter<"AudioModel"> | string
  provider?: Prisma.EnumUpstreamProviderWithAggregatesFilter<"AudioModel"> | $Enums.UpstreamProvider
  description?: Prisma.StringWithAggregatesFilter<"AudioModel"> | string
  pricePerMillionBytes?: Prisma.DecimalWithAggregatesFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: Prisma.DecimalWithAggregatesFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: Prisma.DecimalWithAggregatesFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: Prisma.DecimalWithAggregatesFilter<"AudioModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelCreateInput = {
  name: string
  provider: $Enums.UpstreamProvider
  description?: string
  pricePerMillionBytes?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelUncheckedCreateInput = {
  name: string
  provider: $Enums.UpstreamProvider
  description?: string
  pricePerMillionBytes?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumUpstreamProviderFieldUpdateOperationsInput | $Enums.UpstreamProvider
  description?: Prisma.StringFieldUpdateOperationsInput | string
  pricePerMillionBytes?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelUncheckedUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumUpstreamProviderFieldUpdateOperationsInput | $Enums.UpstreamProvider
  description?: Prisma.StringFieldUpdateOperationsInput | string
  pricePerMillionBytes?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelCreateManyInput = {
  name: string
  provider: $Enums.UpstreamProvider
  description?: string
  pricePerMillionBytes?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumUpstreamProviderFieldUpdateOperationsInput | $Enums.UpstreamProvider
  description?: Prisma.StringFieldUpdateOperationsInput | string
  pricePerMillionBytes?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelUncheckedUpdateManyInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  provider?: Prisma.EnumUpstreamProviderFieldUpdateOperationsInput | $Enums.UpstreamProvider
  description?: Prisma.StringFieldUpdateOperationsInput | string
  pricePerMillionBytes?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerSecond?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerMinute?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  pricePerHour?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type AudioModelCountOrderByAggregateInput = {
  name?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  description?: Prisma.SortOrder
  pricePerMillionBytes?: Prisma.SortOrder
  pricePerSecond?: Prisma.SortOrder
  pricePerMinute?: Prisma.SortOrder
  pricePerHour?: Prisma.SortOrder
}

export type AudioModelAvgOrderByAggregateInput = {
  pricePerMillionBytes?: Prisma.SortOrder
  pricePerSecond?: Prisma.SortOrder
  pricePerMinute?: Prisma.SortOrder
  pricePerHour?: Prisma.SortOrder
}

export type AudioModelMaxOrderByAggregateInput = {
  name?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  description?: Prisma.SortOrder
  pricePerMillionBytes?: Prisma.SortOrder
  pricePerSecond?: Prisma.SortOrder
  pricePerMinute?: Prisma.SortOrder
  pricePerHour?: Prisma.SortOrder
}

export type AudioModelMinOrderByAggregateInput = {
  name?: Prisma.SortOrder
  provider?: Prisma.SortOrder
  description?: Prisma.SortOrder
  pricePerMillionBytes?: Prisma.SortOrder
  pricePerSecond?: Prisma.SortOrder
  pricePerMinute?: Prisma.SortOrder
  pricePerHour?: Prisma.SortOrder
}

export type AudioModelSumOrderByAggregateInput = {
  pricePerMillionBytes?: Prisma.SortOrder
  pricePerSecond?: Prisma.SortOrder
  pricePerMinute?: Prisma.SortOrder
  pricePerHour?: Prisma.SortOrder
}

export type EnumUpstreamProviderFieldUpdateOperationsInput = {
  set?: $Enums.UpstreamProvider
}



export type AudioModelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
  provider?: boolean
  description?: boolean
  pricePerMillionBytes?: boolean
  pricePerSecond?: boolean
  pricePerMinute?: boolean
  pricePerHour?: boolean
}, ExtArgs["result"]["audioModel"]>

export type AudioModelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
  provider?: boolean
  description?: boolean
  pricePerMillionBytes?: boolean
  pricePerSecond?: boolean
  pricePerMinute?: boolean
  pricePerHour?: boolean
}, ExtArgs["result"]["audioModel"]>

export type AudioModelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
  provider?: boolean
  description?: boolean
  pricePerMillionBytes?: boolean
  pricePerSecond?: boolean
  pricePerMinute?: boolean
  pricePerHour?: boolean
}, ExtArgs["result"]["audioModel"]>

export type AudioModelSelectScalar = {
  name?: boolean
  provider?: boolean
  description?: boolean
  pricePerMillionBytes?: boolean
  pricePerSecond?: boolean
  pricePerMinute?: boolean
  pricePerHour?: boolean
}

export type AudioModelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"name" | "provider" | "description" | "pricePerMillionBytes" | "pricePerSecond" | "pricePerMinute" | "pricePerHour", ExtArgs["result"]["audioModel"]>

export type $AudioModelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AudioModel"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    name: string
    provider: $Enums.UpstreamProvider
    description: string
    pricePerMillionBytes: runtime.Decimal
    pricePerSecond: runtime.Decimal
    pricePerMinute: runtime.Decimal
    pricePerHour: runtime.Decimal
  }, ExtArgs["result"]["audioModel"]>
  composites: {}
}

export type AudioModelGetPayload<S extends boolean | null | undefined | AudioModelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AudioModelPayload, S>

export type AudioModelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AudioModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AudioModelCountAggregateInputType | true
  }

export interface AudioModelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AudioModel'], meta: { name: 'AudioModel' } }
  /**
   * Find zero or one AudioModel that matches the filter.
   * @param {AudioModelFindUniqueArgs} args - Arguments to find a AudioModel
   * @example
   * // Get one AudioModel
   * const audioModel = await prisma.audioModel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AudioModelFindUniqueArgs>(args: Prisma.SelectSubset<T, AudioModelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AudioModelClient<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AudioModel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AudioModelFindUniqueOrThrowArgs} args - Arguments to find a AudioModel
   * @example
   * // Get one AudioModel
   * const audioModel = await prisma.audioModel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AudioModelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AudioModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AudioModelClient<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AudioModel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioModelFindFirstArgs} args - Arguments to find a AudioModel
   * @example
   * // Get one AudioModel
   * const audioModel = await prisma.audioModel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AudioModelFindFirstArgs>(args?: Prisma.SelectSubset<T, AudioModelFindFirstArgs<ExtArgs>>): Prisma.Prisma__AudioModelClient<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AudioModel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioModelFindFirstOrThrowArgs} args - Arguments to find a AudioModel
   * @example
   * // Get one AudioModel
   * const audioModel = await prisma.audioModel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AudioModelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AudioModelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AudioModelClient<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AudioModels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioModelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AudioModels
   * const audioModels = await prisma.audioModel.findMany()
   * 
   * // Get first 10 AudioModels
   * const audioModels = await prisma.audioModel.findMany({ take: 10 })
   * 
   * // Only select the `name`
   * const audioModelWithNameOnly = await prisma.audioModel.findMany({ select: { name: true } })
   * 
   */
  findMany<T extends AudioModelFindManyArgs>(args?: Prisma.SelectSubset<T, AudioModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AudioModel.
   * @param {AudioModelCreateArgs} args - Arguments to create a AudioModel.
   * @example
   * // Create one AudioModel
   * const AudioModel = await prisma.audioModel.create({
   *   data: {
   *     // ... data to create a AudioModel
   *   }
   * })
   * 
   */
  create<T extends AudioModelCreateArgs>(args: Prisma.SelectSubset<T, AudioModelCreateArgs<ExtArgs>>): Prisma.Prisma__AudioModelClient<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AudioModels.
   * @param {AudioModelCreateManyArgs} args - Arguments to create many AudioModels.
   * @example
   * // Create many AudioModels
   * const audioModel = await prisma.audioModel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AudioModelCreateManyArgs>(args?: Prisma.SelectSubset<T, AudioModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AudioModels and returns the data saved in the database.
   * @param {AudioModelCreateManyAndReturnArgs} args - Arguments to create many AudioModels.
   * @example
   * // Create many AudioModels
   * const audioModel = await prisma.audioModel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AudioModels and only return the `name`
   * const audioModelWithNameOnly = await prisma.audioModel.createManyAndReturn({
   *   select: { name: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AudioModelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AudioModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AudioModel.
   * @param {AudioModelDeleteArgs} args - Arguments to delete one AudioModel.
   * @example
   * // Delete one AudioModel
   * const AudioModel = await prisma.audioModel.delete({
   *   where: {
   *     // ... filter to delete one AudioModel
   *   }
   * })
   * 
   */
  delete<T extends AudioModelDeleteArgs>(args: Prisma.SelectSubset<T, AudioModelDeleteArgs<ExtArgs>>): Prisma.Prisma__AudioModelClient<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AudioModel.
   * @param {AudioModelUpdateArgs} args - Arguments to update one AudioModel.
   * @example
   * // Update one AudioModel
   * const audioModel = await prisma.audioModel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AudioModelUpdateArgs>(args: Prisma.SelectSubset<T, AudioModelUpdateArgs<ExtArgs>>): Prisma.Prisma__AudioModelClient<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AudioModels.
   * @param {AudioModelDeleteManyArgs} args - Arguments to filter AudioModels to delete.
   * @example
   * // Delete a few AudioModels
   * const { count } = await prisma.audioModel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AudioModelDeleteManyArgs>(args?: Prisma.SelectSubset<T, AudioModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AudioModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioModelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AudioModels
   * const audioModel = await prisma.audioModel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AudioModelUpdateManyArgs>(args: Prisma.SelectSubset<T, AudioModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AudioModels and returns the data updated in the database.
   * @param {AudioModelUpdateManyAndReturnArgs} args - Arguments to update many AudioModels.
   * @example
   * // Update many AudioModels
   * const audioModel = await prisma.audioModel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AudioModels and only return the `name`
   * const audioModelWithNameOnly = await prisma.audioModel.updateManyAndReturn({
   *   select: { name: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AudioModelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AudioModelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AudioModel.
   * @param {AudioModelUpsertArgs} args - Arguments to update or create a AudioModel.
   * @example
   * // Update or create a AudioModel
   * const audioModel = await prisma.audioModel.upsert({
   *   create: {
   *     // ... data to create a AudioModel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AudioModel we want to update
   *   }
   * })
   */
  upsert<T extends AudioModelUpsertArgs>(args: Prisma.SelectSubset<T, AudioModelUpsertArgs<ExtArgs>>): Prisma.Prisma__AudioModelClient<runtime.Types.Result.GetResult<Prisma.$AudioModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AudioModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioModelCountArgs} args - Arguments to filter AudioModels to count.
   * @example
   * // Count the number of AudioModels
   * const count = await prisma.audioModel.count({
   *   where: {
   *     // ... the filter for the AudioModels we want to count
   *   }
   * })
  **/
  count<T extends AudioModelCountArgs>(
    args?: Prisma.Subset<T, AudioModelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AudioModelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AudioModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AudioModelAggregateArgs>(args: Prisma.Subset<T, AudioModelAggregateArgs>): Prisma.PrismaPromise<GetAudioModelAggregateType<T>>

  /**
   * Group by AudioModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AudioModelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AudioModelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AudioModelGroupByArgs['orderBy'] }
      : { orderBy?: AudioModelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AudioModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAudioModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AudioModel model
 */
readonly fields: AudioModelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AudioModel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AudioModelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AudioModel model
 */
export interface AudioModelFieldRefs {
  readonly name: Prisma.FieldRef<"AudioModel", 'String'>
  readonly provider: Prisma.FieldRef<"AudioModel", 'UpstreamProvider'>
  readonly description: Prisma.FieldRef<"AudioModel", 'String'>
  readonly pricePerMillionBytes: Prisma.FieldRef<"AudioModel", 'Decimal'>
  readonly pricePerSecond: Prisma.FieldRef<"AudioModel", 'Decimal'>
  readonly pricePerMinute: Prisma.FieldRef<"AudioModel", 'Decimal'>
  readonly pricePerHour: Prisma.FieldRef<"AudioModel", 'Decimal'>
}
    

// Custom InputTypes
/**
 * AudioModel findUnique
 */
export type AudioModelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * Filter, which AudioModel to fetch.
   */
  where: Prisma.AudioModelWhereUniqueInput
}

/**
 * AudioModel findUniqueOrThrow
 */
export type AudioModelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * Filter, which AudioModel to fetch.
   */
  where: Prisma.AudioModelWhereUniqueInput
}

/**
 * AudioModel findFirst
 */
export type AudioModelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * Filter, which AudioModel to fetch.
   */
  where?: Prisma.AudioModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AudioModels to fetch.
   */
  orderBy?: Prisma.AudioModelOrderByWithRelationInput | Prisma.AudioModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AudioModels.
   */
  cursor?: Prisma.AudioModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AudioModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AudioModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AudioModels.
   */
  distinct?: Prisma.AudioModelScalarFieldEnum | Prisma.AudioModelScalarFieldEnum[]
}

/**
 * AudioModel findFirstOrThrow
 */
export type AudioModelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * Filter, which AudioModel to fetch.
   */
  where?: Prisma.AudioModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AudioModels to fetch.
   */
  orderBy?: Prisma.AudioModelOrderByWithRelationInput | Prisma.AudioModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AudioModels.
   */
  cursor?: Prisma.AudioModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AudioModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AudioModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AudioModels.
   */
  distinct?: Prisma.AudioModelScalarFieldEnum | Prisma.AudioModelScalarFieldEnum[]
}

/**
 * AudioModel findMany
 */
export type AudioModelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * Filter, which AudioModels to fetch.
   */
  where?: Prisma.AudioModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AudioModels to fetch.
   */
  orderBy?: Prisma.AudioModelOrderByWithRelationInput | Prisma.AudioModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AudioModels.
   */
  cursor?: Prisma.AudioModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AudioModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AudioModels.
   */
  skip?: number
  distinct?: Prisma.AudioModelScalarFieldEnum | Prisma.AudioModelScalarFieldEnum[]
}

/**
 * AudioModel create
 */
export type AudioModelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * The data needed to create a AudioModel.
   */
  data: Prisma.XOR<Prisma.AudioModelCreateInput, Prisma.AudioModelUncheckedCreateInput>
}

/**
 * AudioModel createMany
 */
export type AudioModelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AudioModels.
   */
  data: Prisma.AudioModelCreateManyInput | Prisma.AudioModelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AudioModel createManyAndReturn
 */
export type AudioModelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * The data used to create many AudioModels.
   */
  data: Prisma.AudioModelCreateManyInput | Prisma.AudioModelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AudioModel update
 */
export type AudioModelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * The data needed to update a AudioModel.
   */
  data: Prisma.XOR<Prisma.AudioModelUpdateInput, Prisma.AudioModelUncheckedUpdateInput>
  /**
   * Choose, which AudioModel to update.
   */
  where: Prisma.AudioModelWhereUniqueInput
}

/**
 * AudioModel updateMany
 */
export type AudioModelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AudioModels.
   */
  data: Prisma.XOR<Prisma.AudioModelUpdateManyMutationInput, Prisma.AudioModelUncheckedUpdateManyInput>
  /**
   * Filter which AudioModels to update
   */
  where?: Prisma.AudioModelWhereInput
  /**
   * Limit how many AudioModels to update.
   */
  limit?: number
}

/**
 * AudioModel updateManyAndReturn
 */
export type AudioModelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * The data used to update AudioModels.
   */
  data: Prisma.XOR<Prisma.AudioModelUpdateManyMutationInput, Prisma.AudioModelUncheckedUpdateManyInput>
  /**
   * Filter which AudioModels to update
   */
  where?: Prisma.AudioModelWhereInput
  /**
   * Limit how many AudioModels to update.
   */
  limit?: number
}

/**
 * AudioModel upsert
 */
export type AudioModelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * The filter to search for the AudioModel to update in case it exists.
   */
  where: Prisma.AudioModelWhereUniqueInput
  /**
   * In case the AudioModel found by the `where` argument doesn't exist, create a new AudioModel with this data.
   */
  create: Prisma.XOR<Prisma.AudioModelCreateInput, Prisma.AudioModelUncheckedCreateInput>
  /**
   * In case the AudioModel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AudioModelUpdateInput, Prisma.AudioModelUncheckedUpdateInput>
}

/**
 * AudioModel delete
 */
export type AudioModelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
  /**
   * Filter which AudioModel to delete.
   */
  where: Prisma.AudioModelWhereUniqueInput
}

/**
 * AudioModel deleteMany
 */
export type AudioModelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AudioModels to delete
   */
  where?: Prisma.AudioModelWhereInput
  /**
   * Limit how many AudioModels to delete.
   */
  limit?: number
}

/**
 * AudioModel without action
 */
export type AudioModelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AudioModel
   */
  select?: Prisma.AudioModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AudioModel
   */
  omit?: Prisma.AudioModelOmit<ExtArgs> | null
}
