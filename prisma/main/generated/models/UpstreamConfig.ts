
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UpstreamConfig` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UpstreamConfig
 * 
 */
export type UpstreamConfigModel = runtime.Types.Result.DefaultSelection<Prisma.$UpstreamConfigPayload>

export type AggregateUpstreamConfig = {
  _count: UpstreamConfigCountAggregateOutputType | null
  _avg: UpstreamConfigAvgAggregateOutputType | null
  _sum: UpstreamConfigSumAggregateOutputType | null
  _min: UpstreamConfigMinAggregateOutputType | null
  _max: UpstreamConfigMaxAggregateOutputType | null
}

export type UpstreamConfigAvgAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type UpstreamConfigSumAggregateOutputType = {
  id: number | null
  weight: number | null
}

export type UpstreamConfigMinAggregateOutputType = {
  id: number | null
  name: string | null
  type: $Enums.UpstreamProvider | null
  weight: number | null
  baseUrl: string | null
  apiKey: string | null
}

export type UpstreamConfigMaxAggregateOutputType = {
  id: number | null
  name: string | null
  type: $Enums.UpstreamProvider | null
  weight: number | null
  baseUrl: string | null
  apiKey: string | null
}

export type UpstreamConfigCountAggregateOutputType = {
  id: number
  name: number
  type: number
  weight: number
  baseUrl: number
  apiKey: number
  _all: number
}


export type UpstreamConfigAvgAggregateInputType = {
  id?: true
  weight?: true
}

export type UpstreamConfigSumAggregateInputType = {
  id?: true
  weight?: true
}

export type UpstreamConfigMinAggregateInputType = {
  id?: true
  name?: true
  type?: true
  weight?: true
  baseUrl?: true
  apiKey?: true
}

export type UpstreamConfigMaxAggregateInputType = {
  id?: true
  name?: true
  type?: true
  weight?: true
  baseUrl?: true
  apiKey?: true
}

export type UpstreamConfigCountAggregateInputType = {
  id?: true
  name?: true
  type?: true
  weight?: true
  baseUrl?: true
  apiKey?: true
  _all?: true
}

export type UpstreamConfigAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UpstreamConfig to aggregate.
   */
  where?: Prisma.UpstreamConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UpstreamConfigs to fetch.
   */
  orderBy?: Prisma.UpstreamConfigOrderByWithRelationInput | Prisma.UpstreamConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UpstreamConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UpstreamConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UpstreamConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UpstreamConfigs
  **/
  _count?: true | UpstreamConfigCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UpstreamConfigAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UpstreamConfigSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UpstreamConfigMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UpstreamConfigMaxAggregateInputType
}

export type GetUpstreamConfigAggregateType<T extends UpstreamConfigAggregateArgs> = {
      [P in keyof T & keyof AggregateUpstreamConfig]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUpstreamConfig[P]>
    : Prisma.GetScalarType<T[P], AggregateUpstreamConfig[P]>
}




export type UpstreamConfigGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UpstreamConfigWhereInput
  orderBy?: Prisma.UpstreamConfigOrderByWithAggregationInput | Prisma.UpstreamConfigOrderByWithAggregationInput[]
  by: Prisma.UpstreamConfigScalarFieldEnum[] | Prisma.UpstreamConfigScalarFieldEnum
  having?: Prisma.UpstreamConfigScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UpstreamConfigCountAggregateInputType | true
  _avg?: UpstreamConfigAvgAggregateInputType
  _sum?: UpstreamConfigSumAggregateInputType
  _min?: UpstreamConfigMinAggregateInputType
  _max?: UpstreamConfigMaxAggregateInputType
}

export type UpstreamConfigGroupByOutputType = {
  id: number
  name: string
  type: $Enums.UpstreamProvider
  weight: number
  baseUrl: string
  apiKey: string
  _count: UpstreamConfigCountAggregateOutputType | null
  _avg: UpstreamConfigAvgAggregateOutputType | null
  _sum: UpstreamConfigSumAggregateOutputType | null
  _min: UpstreamConfigMinAggregateOutputType | null
  _max: UpstreamConfigMaxAggregateOutputType | null
}

type GetUpstreamConfigGroupByPayload<T extends UpstreamConfigGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UpstreamConfigGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UpstreamConfigGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UpstreamConfigGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UpstreamConfigGroupByOutputType[P]>
      }
    >
  > 



export type UpstreamConfigWhereInput = {
  AND?: Prisma.UpstreamConfigWhereInput | Prisma.UpstreamConfigWhereInput[]
  OR?: Prisma.UpstreamConfigWhereInput[]
  NOT?: Prisma.UpstreamConfigWhereInput | Prisma.UpstreamConfigWhereInput[]
  id?: Prisma.IntFilter<"UpstreamConfig"> | number
  name?: Prisma.StringFilter<"UpstreamConfig"> | string
  type?: Prisma.EnumUpstreamProviderFilter<"UpstreamConfig"> | $Enums.UpstreamProvider
  weight?: Prisma.IntFilter<"UpstreamConfig"> | number
  baseUrl?: Prisma.StringFilter<"UpstreamConfig"> | string
  apiKey?: Prisma.StringFilter<"UpstreamConfig"> | string
}

export type UpstreamConfigOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
}

export type UpstreamConfigWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.UpstreamConfigWhereInput | Prisma.UpstreamConfigWhereInput[]
  OR?: Prisma.UpstreamConfigWhereInput[]
  NOT?: Prisma.UpstreamConfigWhereInput | Prisma.UpstreamConfigWhereInput[]
  type?: Prisma.EnumUpstreamProviderFilter<"UpstreamConfig"> | $Enums.UpstreamProvider
  weight?: Prisma.IntFilter<"UpstreamConfig"> | number
  baseUrl?: Prisma.StringFilter<"UpstreamConfig"> | string
  apiKey?: Prisma.StringFilter<"UpstreamConfig"> | string
}, "id" | "name">

export type UpstreamConfigOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
  _count?: Prisma.UpstreamConfigCountOrderByAggregateInput
  _avg?: Prisma.UpstreamConfigAvgOrderByAggregateInput
  _max?: Prisma.UpstreamConfigMaxOrderByAggregateInput
  _min?: Prisma.UpstreamConfigMinOrderByAggregateInput
  _sum?: Prisma.UpstreamConfigSumOrderByAggregateInput
}

export type UpstreamConfigScalarWhereWithAggregatesInput = {
  AND?: Prisma.UpstreamConfigScalarWhereWithAggregatesInput | Prisma.UpstreamConfigScalarWhereWithAggregatesInput[]
  OR?: Prisma.UpstreamConfigScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UpstreamConfigScalarWhereWithAggregatesInput | Prisma.UpstreamConfigScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UpstreamConfig"> | number
  name?: Prisma.StringWithAggregatesFilter<"UpstreamConfig"> | string
  type?: Prisma.EnumUpstreamProviderWithAggregatesFilter<"UpstreamConfig"> | $Enums.UpstreamProvider
  weight?: Prisma.IntWithAggregatesFilter<"UpstreamConfig"> | number
  baseUrl?: Prisma.StringWithAggregatesFilter<"UpstreamConfig"> | string
  apiKey?: Prisma.StringWithAggregatesFilter<"UpstreamConfig"> | string
}

export type UpstreamConfigCreateInput = {
  name: string
  type: $Enums.UpstreamProvider
  weight?: number
  baseUrl: string
  apiKey: string
}

export type UpstreamConfigUncheckedCreateInput = {
  id?: number
  name: string
  type: $Enums.UpstreamProvider
  weight?: number
  baseUrl: string
  apiKey: string
}

export type UpstreamConfigUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumUpstreamProviderFieldUpdateOperationsInput | $Enums.UpstreamProvider
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  baseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UpstreamConfigUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumUpstreamProviderFieldUpdateOperationsInput | $Enums.UpstreamProvider
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  baseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UpstreamConfigCreateManyInput = {
  id?: number
  name: string
  type: $Enums.UpstreamProvider
  weight?: number
  baseUrl: string
  apiKey: string
}

export type UpstreamConfigUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumUpstreamProviderFieldUpdateOperationsInput | $Enums.UpstreamProvider
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  baseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UpstreamConfigUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumUpstreamProviderFieldUpdateOperationsInput | $Enums.UpstreamProvider
  weight?: Prisma.IntFieldUpdateOperationsInput | number
  baseUrl?: Prisma.StringFieldUpdateOperationsInput | string
  apiKey?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UpstreamConfigCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
}

export type UpstreamConfigAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}

export type UpstreamConfigMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
}

export type UpstreamConfigMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  weight?: Prisma.SortOrder
  baseUrl?: Prisma.SortOrder
  apiKey?: Prisma.SortOrder
}

export type UpstreamConfigSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  weight?: Prisma.SortOrder
}



export type UpstreamConfigSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  weight?: boolean
  baseUrl?: boolean
  apiKey?: boolean
}, ExtArgs["result"]["upstreamConfig"]>

export type UpstreamConfigSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  weight?: boolean
  baseUrl?: boolean
  apiKey?: boolean
}, ExtArgs["result"]["upstreamConfig"]>

export type UpstreamConfigSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  type?: boolean
  weight?: boolean
  baseUrl?: boolean
  apiKey?: boolean
}, ExtArgs["result"]["upstreamConfig"]>

export type UpstreamConfigSelectScalar = {
  id?: boolean
  name?: boolean
  type?: boolean
  weight?: boolean
  baseUrl?: boolean
  apiKey?: boolean
}

export type UpstreamConfigOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "type" | "weight" | "baseUrl" | "apiKey", ExtArgs["result"]["upstreamConfig"]>

export type $UpstreamConfigPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UpstreamConfig"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    type: $Enums.UpstreamProvider
    weight: number
    baseUrl: string
    apiKey: string
  }, ExtArgs["result"]["upstreamConfig"]>
  composites: {}
}

export type UpstreamConfigGetPayload<S extends boolean | null | undefined | UpstreamConfigDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload, S>

export type UpstreamConfigCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UpstreamConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UpstreamConfigCountAggregateInputType | true
  }

export interface UpstreamConfigDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UpstreamConfig'], meta: { name: 'UpstreamConfig' } }
  /**
   * Find zero or one UpstreamConfig that matches the filter.
   * @param {UpstreamConfigFindUniqueArgs} args - Arguments to find a UpstreamConfig
   * @example
   * // Get one UpstreamConfig
   * const upstreamConfig = await prisma.upstreamConfig.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UpstreamConfigFindUniqueArgs>(args: Prisma.SelectSubset<T, UpstreamConfigFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UpstreamConfigClient<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UpstreamConfig that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UpstreamConfigFindUniqueOrThrowArgs} args - Arguments to find a UpstreamConfig
   * @example
   * // Get one UpstreamConfig
   * const upstreamConfig = await prisma.upstreamConfig.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UpstreamConfigFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UpstreamConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UpstreamConfigClient<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UpstreamConfig that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UpstreamConfigFindFirstArgs} args - Arguments to find a UpstreamConfig
   * @example
   * // Get one UpstreamConfig
   * const upstreamConfig = await prisma.upstreamConfig.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UpstreamConfigFindFirstArgs>(args?: Prisma.SelectSubset<T, UpstreamConfigFindFirstArgs<ExtArgs>>): Prisma.Prisma__UpstreamConfigClient<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UpstreamConfig that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UpstreamConfigFindFirstOrThrowArgs} args - Arguments to find a UpstreamConfig
   * @example
   * // Get one UpstreamConfig
   * const upstreamConfig = await prisma.upstreamConfig.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UpstreamConfigFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UpstreamConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UpstreamConfigClient<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UpstreamConfigs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UpstreamConfigFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UpstreamConfigs
   * const upstreamConfigs = await prisma.upstreamConfig.findMany()
   * 
   * // Get first 10 UpstreamConfigs
   * const upstreamConfigs = await prisma.upstreamConfig.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const upstreamConfigWithIdOnly = await prisma.upstreamConfig.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UpstreamConfigFindManyArgs>(args?: Prisma.SelectSubset<T, UpstreamConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UpstreamConfig.
   * @param {UpstreamConfigCreateArgs} args - Arguments to create a UpstreamConfig.
   * @example
   * // Create one UpstreamConfig
   * const UpstreamConfig = await prisma.upstreamConfig.create({
   *   data: {
   *     // ... data to create a UpstreamConfig
   *   }
   * })
   * 
   */
  create<T extends UpstreamConfigCreateArgs>(args: Prisma.SelectSubset<T, UpstreamConfigCreateArgs<ExtArgs>>): Prisma.Prisma__UpstreamConfigClient<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UpstreamConfigs.
   * @param {UpstreamConfigCreateManyArgs} args - Arguments to create many UpstreamConfigs.
   * @example
   * // Create many UpstreamConfigs
   * const upstreamConfig = await prisma.upstreamConfig.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UpstreamConfigCreateManyArgs>(args?: Prisma.SelectSubset<T, UpstreamConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UpstreamConfigs and returns the data saved in the database.
   * @param {UpstreamConfigCreateManyAndReturnArgs} args - Arguments to create many UpstreamConfigs.
   * @example
   * // Create many UpstreamConfigs
   * const upstreamConfig = await prisma.upstreamConfig.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UpstreamConfigs and only return the `id`
   * const upstreamConfigWithIdOnly = await prisma.upstreamConfig.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UpstreamConfigCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UpstreamConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UpstreamConfig.
   * @param {UpstreamConfigDeleteArgs} args - Arguments to delete one UpstreamConfig.
   * @example
   * // Delete one UpstreamConfig
   * const UpstreamConfig = await prisma.upstreamConfig.delete({
   *   where: {
   *     // ... filter to delete one UpstreamConfig
   *   }
   * })
   * 
   */
  delete<T extends UpstreamConfigDeleteArgs>(args: Prisma.SelectSubset<T, UpstreamConfigDeleteArgs<ExtArgs>>): Prisma.Prisma__UpstreamConfigClient<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UpstreamConfig.
   * @param {UpstreamConfigUpdateArgs} args - Arguments to update one UpstreamConfig.
   * @example
   * // Update one UpstreamConfig
   * const upstreamConfig = await prisma.upstreamConfig.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UpstreamConfigUpdateArgs>(args: Prisma.SelectSubset<T, UpstreamConfigUpdateArgs<ExtArgs>>): Prisma.Prisma__UpstreamConfigClient<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UpstreamConfigs.
   * @param {UpstreamConfigDeleteManyArgs} args - Arguments to filter UpstreamConfigs to delete.
   * @example
   * // Delete a few UpstreamConfigs
   * const { count } = await prisma.upstreamConfig.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UpstreamConfigDeleteManyArgs>(args?: Prisma.SelectSubset<T, UpstreamConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UpstreamConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UpstreamConfigUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UpstreamConfigs
   * const upstreamConfig = await prisma.upstreamConfig.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UpstreamConfigUpdateManyArgs>(args: Prisma.SelectSubset<T, UpstreamConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UpstreamConfigs and returns the data updated in the database.
   * @param {UpstreamConfigUpdateManyAndReturnArgs} args - Arguments to update many UpstreamConfigs.
   * @example
   * // Update many UpstreamConfigs
   * const upstreamConfig = await prisma.upstreamConfig.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UpstreamConfigs and only return the `id`
   * const upstreamConfigWithIdOnly = await prisma.upstreamConfig.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UpstreamConfigUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UpstreamConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UpstreamConfig.
   * @param {UpstreamConfigUpsertArgs} args - Arguments to update or create a UpstreamConfig.
   * @example
   * // Update or create a UpstreamConfig
   * const upstreamConfig = await prisma.upstreamConfig.upsert({
   *   create: {
   *     // ... data to create a UpstreamConfig
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UpstreamConfig we want to update
   *   }
   * })
   */
  upsert<T extends UpstreamConfigUpsertArgs>(args: Prisma.SelectSubset<T, UpstreamConfigUpsertArgs<ExtArgs>>): Prisma.Prisma__UpstreamConfigClient<runtime.Types.Result.GetResult<Prisma.$UpstreamConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UpstreamConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UpstreamConfigCountArgs} args - Arguments to filter UpstreamConfigs to count.
   * @example
   * // Count the number of UpstreamConfigs
   * const count = await prisma.upstreamConfig.count({
   *   where: {
   *     // ... the filter for the UpstreamConfigs we want to count
   *   }
   * })
  **/
  count<T extends UpstreamConfigCountArgs>(
    args?: Prisma.Subset<T, UpstreamConfigCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UpstreamConfigCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UpstreamConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UpstreamConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UpstreamConfigAggregateArgs>(args: Prisma.Subset<T, UpstreamConfigAggregateArgs>): Prisma.PrismaPromise<GetUpstreamConfigAggregateType<T>>

  /**
   * Group by UpstreamConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UpstreamConfigGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UpstreamConfigGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UpstreamConfigGroupByArgs['orderBy'] }
      : { orderBy?: UpstreamConfigGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UpstreamConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUpstreamConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UpstreamConfig model
 */
readonly fields: UpstreamConfigFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UpstreamConfig.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UpstreamConfigClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UpstreamConfig model
 */
export interface UpstreamConfigFieldRefs {
  readonly id: Prisma.FieldRef<"UpstreamConfig", 'Int'>
  readonly name: Prisma.FieldRef<"UpstreamConfig", 'String'>
  readonly type: Prisma.FieldRef<"UpstreamConfig", 'UpstreamProvider'>
  readonly weight: Prisma.FieldRef<"UpstreamConfig", 'Int'>
  readonly baseUrl: Prisma.FieldRef<"UpstreamConfig", 'String'>
  readonly apiKey: Prisma.FieldRef<"UpstreamConfig", 'String'>
}
    

// Custom InputTypes
/**
 * UpstreamConfig findUnique
 */
export type UpstreamConfigFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * Filter, which UpstreamConfig to fetch.
   */
  where: Prisma.UpstreamConfigWhereUniqueInput
}

/**
 * UpstreamConfig findUniqueOrThrow
 */
export type UpstreamConfigFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * Filter, which UpstreamConfig to fetch.
   */
  where: Prisma.UpstreamConfigWhereUniqueInput
}

/**
 * UpstreamConfig findFirst
 */
export type UpstreamConfigFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * Filter, which UpstreamConfig to fetch.
   */
  where?: Prisma.UpstreamConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UpstreamConfigs to fetch.
   */
  orderBy?: Prisma.UpstreamConfigOrderByWithRelationInput | Prisma.UpstreamConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UpstreamConfigs.
   */
  cursor?: Prisma.UpstreamConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UpstreamConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UpstreamConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UpstreamConfigs.
   */
  distinct?: Prisma.UpstreamConfigScalarFieldEnum | Prisma.UpstreamConfigScalarFieldEnum[]
}

/**
 * UpstreamConfig findFirstOrThrow
 */
export type UpstreamConfigFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * Filter, which UpstreamConfig to fetch.
   */
  where?: Prisma.UpstreamConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UpstreamConfigs to fetch.
   */
  orderBy?: Prisma.UpstreamConfigOrderByWithRelationInput | Prisma.UpstreamConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UpstreamConfigs.
   */
  cursor?: Prisma.UpstreamConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UpstreamConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UpstreamConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UpstreamConfigs.
   */
  distinct?: Prisma.UpstreamConfigScalarFieldEnum | Prisma.UpstreamConfigScalarFieldEnum[]
}

/**
 * UpstreamConfig findMany
 */
export type UpstreamConfigFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * Filter, which UpstreamConfigs to fetch.
   */
  where?: Prisma.UpstreamConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UpstreamConfigs to fetch.
   */
  orderBy?: Prisma.UpstreamConfigOrderByWithRelationInput | Prisma.UpstreamConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UpstreamConfigs.
   */
  cursor?: Prisma.UpstreamConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UpstreamConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UpstreamConfigs.
   */
  skip?: number
  distinct?: Prisma.UpstreamConfigScalarFieldEnum | Prisma.UpstreamConfigScalarFieldEnum[]
}

/**
 * UpstreamConfig create
 */
export type UpstreamConfigCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * The data needed to create a UpstreamConfig.
   */
  data: Prisma.XOR<Prisma.UpstreamConfigCreateInput, Prisma.UpstreamConfigUncheckedCreateInput>
}

/**
 * UpstreamConfig createMany
 */
export type UpstreamConfigCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UpstreamConfigs.
   */
  data: Prisma.UpstreamConfigCreateManyInput | Prisma.UpstreamConfigCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UpstreamConfig createManyAndReturn
 */
export type UpstreamConfigCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * The data used to create many UpstreamConfigs.
   */
  data: Prisma.UpstreamConfigCreateManyInput | Prisma.UpstreamConfigCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UpstreamConfig update
 */
export type UpstreamConfigUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * The data needed to update a UpstreamConfig.
   */
  data: Prisma.XOR<Prisma.UpstreamConfigUpdateInput, Prisma.UpstreamConfigUncheckedUpdateInput>
  /**
   * Choose, which UpstreamConfig to update.
   */
  where: Prisma.UpstreamConfigWhereUniqueInput
}

/**
 * UpstreamConfig updateMany
 */
export type UpstreamConfigUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UpstreamConfigs.
   */
  data: Prisma.XOR<Prisma.UpstreamConfigUpdateManyMutationInput, Prisma.UpstreamConfigUncheckedUpdateManyInput>
  /**
   * Filter which UpstreamConfigs to update
   */
  where?: Prisma.UpstreamConfigWhereInput
  /**
   * Limit how many UpstreamConfigs to update.
   */
  limit?: number
}

/**
 * UpstreamConfig updateManyAndReturn
 */
export type UpstreamConfigUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * The data used to update UpstreamConfigs.
   */
  data: Prisma.XOR<Prisma.UpstreamConfigUpdateManyMutationInput, Prisma.UpstreamConfigUncheckedUpdateManyInput>
  /**
   * Filter which UpstreamConfigs to update
   */
  where?: Prisma.UpstreamConfigWhereInput
  /**
   * Limit how many UpstreamConfigs to update.
   */
  limit?: number
}

/**
 * UpstreamConfig upsert
 */
export type UpstreamConfigUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * The filter to search for the UpstreamConfig to update in case it exists.
   */
  where: Prisma.UpstreamConfigWhereUniqueInput
  /**
   * In case the UpstreamConfig found by the `where` argument doesn't exist, create a new UpstreamConfig with this data.
   */
  create: Prisma.XOR<Prisma.UpstreamConfigCreateInput, Prisma.UpstreamConfigUncheckedCreateInput>
  /**
   * In case the UpstreamConfig was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UpstreamConfigUpdateInput, Prisma.UpstreamConfigUncheckedUpdateInput>
}

/**
 * UpstreamConfig delete
 */
export type UpstreamConfigDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
  /**
   * Filter which UpstreamConfig to delete.
   */
  where: Prisma.UpstreamConfigWhereUniqueInput
}

/**
 * UpstreamConfig deleteMany
 */
export type UpstreamConfigDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UpstreamConfigs to delete
   */
  where?: Prisma.UpstreamConfigWhereInput
  /**
   * Limit how many UpstreamConfigs to delete.
   */
  limit?: number
}

/**
 * UpstreamConfig without action
 */
export type UpstreamConfigDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UpstreamConfig
   */
  select?: Prisma.UpstreamConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UpstreamConfig
   */
  omit?: Prisma.UpstreamConfigOmit<ExtArgs> | null
}
