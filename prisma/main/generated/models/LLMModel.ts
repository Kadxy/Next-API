
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `LLMModel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LLMModel
 * 
 */
export type LLMModelModel = runtime.Types.Result.DefaultSelection<Prisma.$LLMModelPayload>

export type AggregateLLMModel = {
  _count: LLMModelCountAggregateOutputType | null
  _avg: LLMModelAvgAggregateOutputType | null
  _sum: LLMModelSumAggregateOutputType | null
  _min: LLMModelMinAggregateOutputType | null
  _max: LLMModelMaxAggregateOutputType | null
}

export type LLMModelAvgAggregateOutputType = {
  inputPrice: runtime.Decimal | null
  outputPrice: runtime.Decimal | null
}

export type LLMModelSumAggregateOutputType = {
  inputPrice: runtime.Decimal | null
  outputPrice: runtime.Decimal | null
}

export type LLMModelMinAggregateOutputType = {
  name: string | null
  inputPrice: runtime.Decimal | null
  outputPrice: runtime.Decimal | null
  releaseDate: Date | null
  description: string | null
}

export type LLMModelMaxAggregateOutputType = {
  name: string | null
  inputPrice: runtime.Decimal | null
  outputPrice: runtime.Decimal | null
  releaseDate: Date | null
  description: string | null
}

export type LLMModelCountAggregateOutputType = {
  name: number
  inputPrice: number
  outputPrice: number
  releaseDate: number
  description: number
  _all: number
}


export type LLMModelAvgAggregateInputType = {
  inputPrice?: true
  outputPrice?: true
}

export type LLMModelSumAggregateInputType = {
  inputPrice?: true
  outputPrice?: true
}

export type LLMModelMinAggregateInputType = {
  name?: true
  inputPrice?: true
  outputPrice?: true
  releaseDate?: true
  description?: true
}

export type LLMModelMaxAggregateInputType = {
  name?: true
  inputPrice?: true
  outputPrice?: true
  releaseDate?: true
  description?: true
}

export type LLMModelCountAggregateInputType = {
  name?: true
  inputPrice?: true
  outputPrice?: true
  releaseDate?: true
  description?: true
  _all?: true
}

export type LLMModelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LLMModel to aggregate.
   */
  where?: Prisma.LLMModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LLMModels to fetch.
   */
  orderBy?: Prisma.LLMModelOrderByWithRelationInput | Prisma.LLMModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LLMModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LLMModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LLMModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LLMModels
  **/
  _count?: true | LLMModelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LLMModelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LLMModelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LLMModelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LLMModelMaxAggregateInputType
}

export type GetLLMModelAggregateType<T extends LLMModelAggregateArgs> = {
      [P in keyof T & keyof AggregateLLMModel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLLMModel[P]>
    : Prisma.GetScalarType<T[P], AggregateLLMModel[P]>
}




export type LLMModelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LLMModelWhereInput
  orderBy?: Prisma.LLMModelOrderByWithAggregationInput | Prisma.LLMModelOrderByWithAggregationInput[]
  by: Prisma.LLMModelScalarFieldEnum[] | Prisma.LLMModelScalarFieldEnum
  having?: Prisma.LLMModelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LLMModelCountAggregateInputType | true
  _avg?: LLMModelAvgAggregateInputType
  _sum?: LLMModelSumAggregateInputType
  _min?: LLMModelMinAggregateInputType
  _max?: LLMModelMaxAggregateInputType
}

export type LLMModelGroupByOutputType = {
  name: string
  inputPrice: runtime.Decimal
  outputPrice: runtime.Decimal
  releaseDate: Date
  description: string
  _count: LLMModelCountAggregateOutputType | null
  _avg: LLMModelAvgAggregateOutputType | null
  _sum: LLMModelSumAggregateOutputType | null
  _min: LLMModelMinAggregateOutputType | null
  _max: LLMModelMaxAggregateOutputType | null
}

type GetLLMModelGroupByPayload<T extends LLMModelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LLMModelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LLMModelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LLMModelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LLMModelGroupByOutputType[P]>
      }
    >
  > 



export type LLMModelWhereInput = {
  AND?: Prisma.LLMModelWhereInput | Prisma.LLMModelWhereInput[]
  OR?: Prisma.LLMModelWhereInput[]
  NOT?: Prisma.LLMModelWhereInput | Prisma.LLMModelWhereInput[]
  name?: Prisma.StringFilter<"LLMModel"> | string
  inputPrice?: Prisma.DecimalFilter<"LLMModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFilter<"LLMModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Prisma.DateTimeFilter<"LLMModel"> | Date | string
  description?: Prisma.StringFilter<"LLMModel"> | string
}

export type LLMModelOrderByWithRelationInput = {
  name?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type LLMModelWhereUniqueInput = Prisma.AtLeast<{
  name?: string
  AND?: Prisma.LLMModelWhereInput | Prisma.LLMModelWhereInput[]
  OR?: Prisma.LLMModelWhereInput[]
  NOT?: Prisma.LLMModelWhereInput | Prisma.LLMModelWhereInput[]
  inputPrice?: Prisma.DecimalFilter<"LLMModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFilter<"LLMModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Prisma.DateTimeFilter<"LLMModel"> | Date | string
  description?: Prisma.StringFilter<"LLMModel"> | string
}, "name">

export type LLMModelOrderByWithAggregationInput = {
  name?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  description?: Prisma.SortOrder
  _count?: Prisma.LLMModelCountOrderByAggregateInput
  _avg?: Prisma.LLMModelAvgOrderByAggregateInput
  _max?: Prisma.LLMModelMaxOrderByAggregateInput
  _min?: Prisma.LLMModelMinOrderByAggregateInput
  _sum?: Prisma.LLMModelSumOrderByAggregateInput
}

export type LLMModelScalarWhereWithAggregatesInput = {
  AND?: Prisma.LLMModelScalarWhereWithAggregatesInput | Prisma.LLMModelScalarWhereWithAggregatesInput[]
  OR?: Prisma.LLMModelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LLMModelScalarWhereWithAggregatesInput | Prisma.LLMModelScalarWhereWithAggregatesInput[]
  name?: Prisma.StringWithAggregatesFilter<"LLMModel"> | string
  inputPrice?: Prisma.DecimalWithAggregatesFilter<"LLMModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalWithAggregatesFilter<"LLMModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Prisma.DateTimeWithAggregatesFilter<"LLMModel"> | Date | string
  description?: Prisma.StringWithAggregatesFilter<"LLMModel"> | string
}

export type LLMModelCreateInput = {
  name: string
  inputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Date | string
  description?: string
}

export type LLMModelUncheckedCreateInput = {
  name: string
  inputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Date | string
  description?: string
}

export type LLMModelUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  inputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LLMModelUncheckedUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  inputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LLMModelCreateManyInput = {
  name: string
  inputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Date | string
  description?: string
}

export type LLMModelUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  inputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LLMModelUncheckedUpdateManyInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  inputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type LLMModelCountOrderByAggregateInput = {
  name?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type LLMModelAvgOrderByAggregateInput = {
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
}

export type LLMModelMaxOrderByAggregateInput = {
  name?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type LLMModelMinOrderByAggregateInput = {
  name?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type LLMModelSumOrderByAggregateInput = {
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
}



export type LLMModelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
  inputPrice?: boolean
  outputPrice?: boolean
  releaseDate?: boolean
  description?: boolean
}, ExtArgs["result"]["lLMModel"]>

export type LLMModelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
  inputPrice?: boolean
  outputPrice?: boolean
  releaseDate?: boolean
  description?: boolean
}, ExtArgs["result"]["lLMModel"]>

export type LLMModelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  name?: boolean
  inputPrice?: boolean
  outputPrice?: boolean
  releaseDate?: boolean
  description?: boolean
}, ExtArgs["result"]["lLMModel"]>

export type LLMModelSelectScalar = {
  name?: boolean
  inputPrice?: boolean
  outputPrice?: boolean
  releaseDate?: boolean
  description?: boolean
}

export type LLMModelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"name" | "inputPrice" | "outputPrice" | "releaseDate" | "description", ExtArgs["result"]["lLMModel"]>

export type $LLMModelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LLMModel"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    name: string
    inputPrice: runtime.Decimal
    outputPrice: runtime.Decimal
    releaseDate: Date
    description: string
  }, ExtArgs["result"]["lLMModel"]>
  composites: {}
}

export type LLMModelGetPayload<S extends boolean | null | undefined | LLMModelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LLMModelPayload, S>

export type LLMModelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LLMModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LLMModelCountAggregateInputType | true
  }

export interface LLMModelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LLMModel'], meta: { name: 'LLMModel' } }
  /**
   * Find zero or one LLMModel that matches the filter.
   * @param {LLMModelFindUniqueArgs} args - Arguments to find a LLMModel
   * @example
   * // Get one LLMModel
   * const lLMModel = await prisma.lLMModel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LLMModelFindUniqueArgs>(args: Prisma.SelectSubset<T, LLMModelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LLMModelClient<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LLMModel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LLMModelFindUniqueOrThrowArgs} args - Arguments to find a LLMModel
   * @example
   * // Get one LLMModel
   * const lLMModel = await prisma.lLMModel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LLMModelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LLMModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LLMModelClient<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LLMModel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LLMModelFindFirstArgs} args - Arguments to find a LLMModel
   * @example
   * // Get one LLMModel
   * const lLMModel = await prisma.lLMModel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LLMModelFindFirstArgs>(args?: Prisma.SelectSubset<T, LLMModelFindFirstArgs<ExtArgs>>): Prisma.Prisma__LLMModelClient<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LLMModel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LLMModelFindFirstOrThrowArgs} args - Arguments to find a LLMModel
   * @example
   * // Get one LLMModel
   * const lLMModel = await prisma.lLMModel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LLMModelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LLMModelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LLMModelClient<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LLMModels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LLMModelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LLMModels
   * const lLMModels = await prisma.lLMModel.findMany()
   * 
   * // Get first 10 LLMModels
   * const lLMModels = await prisma.lLMModel.findMany({ take: 10 })
   * 
   * // Only select the `name`
   * const lLMModelWithNameOnly = await prisma.lLMModel.findMany({ select: { name: true } })
   * 
   */
  findMany<T extends LLMModelFindManyArgs>(args?: Prisma.SelectSubset<T, LLMModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LLMModel.
   * @param {LLMModelCreateArgs} args - Arguments to create a LLMModel.
   * @example
   * // Create one LLMModel
   * const LLMModel = await prisma.lLMModel.create({
   *   data: {
   *     // ... data to create a LLMModel
   *   }
   * })
   * 
   */
  create<T extends LLMModelCreateArgs>(args: Prisma.SelectSubset<T, LLMModelCreateArgs<ExtArgs>>): Prisma.Prisma__LLMModelClient<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LLMModels.
   * @param {LLMModelCreateManyArgs} args - Arguments to create many LLMModels.
   * @example
   * // Create many LLMModels
   * const lLMModel = await prisma.lLMModel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LLMModelCreateManyArgs>(args?: Prisma.SelectSubset<T, LLMModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LLMModels and returns the data saved in the database.
   * @param {LLMModelCreateManyAndReturnArgs} args - Arguments to create many LLMModels.
   * @example
   * // Create many LLMModels
   * const lLMModel = await prisma.lLMModel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LLMModels and only return the `name`
   * const lLMModelWithNameOnly = await prisma.lLMModel.createManyAndReturn({
   *   select: { name: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LLMModelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LLMModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LLMModel.
   * @param {LLMModelDeleteArgs} args - Arguments to delete one LLMModel.
   * @example
   * // Delete one LLMModel
   * const LLMModel = await prisma.lLMModel.delete({
   *   where: {
   *     // ... filter to delete one LLMModel
   *   }
   * })
   * 
   */
  delete<T extends LLMModelDeleteArgs>(args: Prisma.SelectSubset<T, LLMModelDeleteArgs<ExtArgs>>): Prisma.Prisma__LLMModelClient<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LLMModel.
   * @param {LLMModelUpdateArgs} args - Arguments to update one LLMModel.
   * @example
   * // Update one LLMModel
   * const lLMModel = await prisma.lLMModel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LLMModelUpdateArgs>(args: Prisma.SelectSubset<T, LLMModelUpdateArgs<ExtArgs>>): Prisma.Prisma__LLMModelClient<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LLMModels.
   * @param {LLMModelDeleteManyArgs} args - Arguments to filter LLMModels to delete.
   * @example
   * // Delete a few LLMModels
   * const { count } = await prisma.lLMModel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LLMModelDeleteManyArgs>(args?: Prisma.SelectSubset<T, LLMModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LLMModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LLMModelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LLMModels
   * const lLMModel = await prisma.lLMModel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LLMModelUpdateManyArgs>(args: Prisma.SelectSubset<T, LLMModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LLMModels and returns the data updated in the database.
   * @param {LLMModelUpdateManyAndReturnArgs} args - Arguments to update many LLMModels.
   * @example
   * // Update many LLMModels
   * const lLMModel = await prisma.lLMModel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LLMModels and only return the `name`
   * const lLMModelWithNameOnly = await prisma.lLMModel.updateManyAndReturn({
   *   select: { name: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LLMModelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LLMModelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LLMModel.
   * @param {LLMModelUpsertArgs} args - Arguments to update or create a LLMModel.
   * @example
   * // Update or create a LLMModel
   * const lLMModel = await prisma.lLMModel.upsert({
   *   create: {
   *     // ... data to create a LLMModel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LLMModel we want to update
   *   }
   * })
   */
  upsert<T extends LLMModelUpsertArgs>(args: Prisma.SelectSubset<T, LLMModelUpsertArgs<ExtArgs>>): Prisma.Prisma__LLMModelClient<runtime.Types.Result.GetResult<Prisma.$LLMModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LLMModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LLMModelCountArgs} args - Arguments to filter LLMModels to count.
   * @example
   * // Count the number of LLMModels
   * const count = await prisma.lLMModel.count({
   *   where: {
   *     // ... the filter for the LLMModels we want to count
   *   }
   * })
  **/
  count<T extends LLMModelCountArgs>(
    args?: Prisma.Subset<T, LLMModelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LLMModelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LLMModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LLMModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LLMModelAggregateArgs>(args: Prisma.Subset<T, LLMModelAggregateArgs>): Prisma.PrismaPromise<GetLLMModelAggregateType<T>>

  /**
   * Group by LLMModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LLMModelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LLMModelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LLMModelGroupByArgs['orderBy'] }
      : { orderBy?: LLMModelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LLMModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLLMModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LLMModel model
 */
readonly fields: LLMModelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LLMModel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LLMModelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LLMModel model
 */
export interface LLMModelFieldRefs {
  readonly name: Prisma.FieldRef<"LLMModel", 'String'>
  readonly inputPrice: Prisma.FieldRef<"LLMModel", 'Decimal'>
  readonly outputPrice: Prisma.FieldRef<"LLMModel", 'Decimal'>
  readonly releaseDate: Prisma.FieldRef<"LLMModel", 'DateTime'>
  readonly description: Prisma.FieldRef<"LLMModel", 'String'>
}
    

// Custom InputTypes
/**
 * LLMModel findUnique
 */
export type LLMModelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * Filter, which LLMModel to fetch.
   */
  where: Prisma.LLMModelWhereUniqueInput
}

/**
 * LLMModel findUniqueOrThrow
 */
export type LLMModelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * Filter, which LLMModel to fetch.
   */
  where: Prisma.LLMModelWhereUniqueInput
}

/**
 * LLMModel findFirst
 */
export type LLMModelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * Filter, which LLMModel to fetch.
   */
  where?: Prisma.LLMModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LLMModels to fetch.
   */
  orderBy?: Prisma.LLMModelOrderByWithRelationInput | Prisma.LLMModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LLMModels.
   */
  cursor?: Prisma.LLMModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LLMModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LLMModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LLMModels.
   */
  distinct?: Prisma.LLMModelScalarFieldEnum | Prisma.LLMModelScalarFieldEnum[]
}

/**
 * LLMModel findFirstOrThrow
 */
export type LLMModelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * Filter, which LLMModel to fetch.
   */
  where?: Prisma.LLMModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LLMModels to fetch.
   */
  orderBy?: Prisma.LLMModelOrderByWithRelationInput | Prisma.LLMModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LLMModels.
   */
  cursor?: Prisma.LLMModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LLMModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LLMModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LLMModels.
   */
  distinct?: Prisma.LLMModelScalarFieldEnum | Prisma.LLMModelScalarFieldEnum[]
}

/**
 * LLMModel findMany
 */
export type LLMModelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * Filter, which LLMModels to fetch.
   */
  where?: Prisma.LLMModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LLMModels to fetch.
   */
  orderBy?: Prisma.LLMModelOrderByWithRelationInput | Prisma.LLMModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LLMModels.
   */
  cursor?: Prisma.LLMModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LLMModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LLMModels.
   */
  skip?: number
  distinct?: Prisma.LLMModelScalarFieldEnum | Prisma.LLMModelScalarFieldEnum[]
}

/**
 * LLMModel create
 */
export type LLMModelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * The data needed to create a LLMModel.
   */
  data: Prisma.XOR<Prisma.LLMModelCreateInput, Prisma.LLMModelUncheckedCreateInput>
}

/**
 * LLMModel createMany
 */
export type LLMModelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LLMModels.
   */
  data: Prisma.LLMModelCreateManyInput | Prisma.LLMModelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LLMModel createManyAndReturn
 */
export type LLMModelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * The data used to create many LLMModels.
   */
  data: Prisma.LLMModelCreateManyInput | Prisma.LLMModelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LLMModel update
 */
export type LLMModelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * The data needed to update a LLMModel.
   */
  data: Prisma.XOR<Prisma.LLMModelUpdateInput, Prisma.LLMModelUncheckedUpdateInput>
  /**
   * Choose, which LLMModel to update.
   */
  where: Prisma.LLMModelWhereUniqueInput
}

/**
 * LLMModel updateMany
 */
export type LLMModelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LLMModels.
   */
  data: Prisma.XOR<Prisma.LLMModelUpdateManyMutationInput, Prisma.LLMModelUncheckedUpdateManyInput>
  /**
   * Filter which LLMModels to update
   */
  where?: Prisma.LLMModelWhereInput
  /**
   * Limit how many LLMModels to update.
   */
  limit?: number
}

/**
 * LLMModel updateManyAndReturn
 */
export type LLMModelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * The data used to update LLMModels.
   */
  data: Prisma.XOR<Prisma.LLMModelUpdateManyMutationInput, Prisma.LLMModelUncheckedUpdateManyInput>
  /**
   * Filter which LLMModels to update
   */
  where?: Prisma.LLMModelWhereInput
  /**
   * Limit how many LLMModels to update.
   */
  limit?: number
}

/**
 * LLMModel upsert
 */
export type LLMModelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * The filter to search for the LLMModel to update in case it exists.
   */
  where: Prisma.LLMModelWhereUniqueInput
  /**
   * In case the LLMModel found by the `where` argument doesn't exist, create a new LLMModel with this data.
   */
  create: Prisma.XOR<Prisma.LLMModelCreateInput, Prisma.LLMModelUncheckedCreateInput>
  /**
   * In case the LLMModel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LLMModelUpdateInput, Prisma.LLMModelUncheckedUpdateInput>
}

/**
 * LLMModel delete
 */
export type LLMModelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
  /**
   * Filter which LLMModel to delete.
   */
  where: Prisma.LLMModelWhereUniqueInput
}

/**
 * LLMModel deleteMany
 */
export type LLMModelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LLMModels to delete
   */
  where?: Prisma.LLMModelWhereInput
  /**
   * Limit how many LLMModels to delete.
   */
  limit?: number
}

/**
 * LLMModel without action
 */
export type LLMModelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LLMModel
   */
  select?: Prisma.LLMModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LLMModel
   */
  omit?: Prisma.LLMModelOmit<ExtArgs> | null
}
