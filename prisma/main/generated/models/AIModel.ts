
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AIModel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AIModel
 * 
 */
export type AIModelModel = runtime.Types.Result.DefaultSelection<Prisma.$AIModelPayload>

export type AggregateAIModel = {
  _count: AIModelCountAggregateOutputType | null
  _avg: AIModelAvgAggregateOutputType | null
  _sum: AIModelSumAggregateOutputType | null
  _min: AIModelMinAggregateOutputType | null
  _max: AIModelMaxAggregateOutputType | null
}

export type AIModelAvgAggregateOutputType = {
  id: number | null
  providerId: number | null
  inputPrice: runtime.Decimal | null
  outputPrice: runtime.Decimal | null
}

export type AIModelSumAggregateOutputType = {
  id: number | null
  providerId: number | null
  inputPrice: runtime.Decimal | null
  outputPrice: runtime.Decimal | null
}

export type AIModelMinAggregateOutputType = {
  id: number | null
  name: string | null
  providerId: number | null
  isActive: boolean | null
  inputPrice: runtime.Decimal | null
  outputPrice: runtime.Decimal | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AIModelMaxAggregateOutputType = {
  id: number | null
  name: string | null
  providerId: number | null
  isActive: boolean | null
  inputPrice: runtime.Decimal | null
  outputPrice: runtime.Decimal | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AIModelCountAggregateOutputType = {
  id: number
  name: number
  providerId: number
  isActive: number
  inputPrice: number
  outputPrice: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AIModelAvgAggregateInputType = {
  id?: true
  providerId?: true
  inputPrice?: true
  outputPrice?: true
}

export type AIModelSumAggregateInputType = {
  id?: true
  providerId?: true
  inputPrice?: true
  outputPrice?: true
}

export type AIModelMinAggregateInputType = {
  id?: true
  name?: true
  providerId?: true
  isActive?: true
  inputPrice?: true
  outputPrice?: true
  createdAt?: true
  updatedAt?: true
}

export type AIModelMaxAggregateInputType = {
  id?: true
  name?: true
  providerId?: true
  isActive?: true
  inputPrice?: true
  outputPrice?: true
  createdAt?: true
  updatedAt?: true
}

export type AIModelCountAggregateInputType = {
  id?: true
  name?: true
  providerId?: true
  isActive?: true
  inputPrice?: true
  outputPrice?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AIModelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AIModel to aggregate.
   */
  where?: Prisma.AIModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AIModels to fetch.
   */
  orderBy?: Prisma.AIModelOrderByWithRelationInput | Prisma.AIModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AIModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AIModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AIModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AIModels
  **/
  _count?: true | AIModelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AIModelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AIModelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AIModelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AIModelMaxAggregateInputType
}

export type GetAIModelAggregateType<T extends AIModelAggregateArgs> = {
      [P in keyof T & keyof AggregateAIModel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAIModel[P]>
    : Prisma.GetScalarType<T[P], AggregateAIModel[P]>
}




export type AIModelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AIModelWhereInput
  orderBy?: Prisma.AIModelOrderByWithAggregationInput | Prisma.AIModelOrderByWithAggregationInput[]
  by: Prisma.AIModelScalarFieldEnum[] | Prisma.AIModelScalarFieldEnum
  having?: Prisma.AIModelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AIModelCountAggregateInputType | true
  _avg?: AIModelAvgAggregateInputType
  _sum?: AIModelSumAggregateInputType
  _min?: AIModelMinAggregateInputType
  _max?: AIModelMaxAggregateInputType
}

export type AIModelGroupByOutputType = {
  id: number
  name: string
  providerId: number
  isActive: boolean
  inputPrice: runtime.Decimal
  outputPrice: runtime.Decimal
  createdAt: Date
  updatedAt: Date
  _count: AIModelCountAggregateOutputType | null
  _avg: AIModelAvgAggregateOutputType | null
  _sum: AIModelSumAggregateOutputType | null
  _min: AIModelMinAggregateOutputType | null
  _max: AIModelMaxAggregateOutputType | null
}

type GetAIModelGroupByPayload<T extends AIModelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AIModelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AIModelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AIModelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AIModelGroupByOutputType[P]>
      }
    >
  > 



export type AIModelWhereInput = {
  AND?: Prisma.AIModelWhereInput | Prisma.AIModelWhereInput[]
  OR?: Prisma.AIModelWhereInput[]
  NOT?: Prisma.AIModelWhereInput | Prisma.AIModelWhereInput[]
  id?: Prisma.IntFilter<"AIModel"> | number
  name?: Prisma.StringFilter<"AIModel"> | string
  providerId?: Prisma.IntFilter<"AIModel"> | number
  isActive?: Prisma.BoolFilter<"AIModel"> | boolean
  inputPrice?: Prisma.DecimalFilter<"AIModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFilter<"AIModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFilter<"AIModel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AIModel"> | Date | string
}

export type AIModelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AIModelWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.AIModelWhereInput | Prisma.AIModelWhereInput[]
  OR?: Prisma.AIModelWhereInput[]
  NOT?: Prisma.AIModelWhereInput | Prisma.AIModelWhereInput[]
  providerId?: Prisma.IntFilter<"AIModel"> | number
  isActive?: Prisma.BoolFilter<"AIModel"> | boolean
  inputPrice?: Prisma.DecimalFilter<"AIModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFilter<"AIModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFilter<"AIModel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AIModel"> | Date | string
}, "id" | "name">

export type AIModelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AIModelCountOrderByAggregateInput
  _avg?: Prisma.AIModelAvgOrderByAggregateInput
  _max?: Prisma.AIModelMaxOrderByAggregateInput
  _min?: Prisma.AIModelMinOrderByAggregateInput
  _sum?: Prisma.AIModelSumOrderByAggregateInput
}

export type AIModelScalarWhereWithAggregatesInput = {
  AND?: Prisma.AIModelScalarWhereWithAggregatesInput | Prisma.AIModelScalarWhereWithAggregatesInput[]
  OR?: Prisma.AIModelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AIModelScalarWhereWithAggregatesInput | Prisma.AIModelScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"AIModel"> | number
  name?: Prisma.StringWithAggregatesFilter<"AIModel"> | string
  providerId?: Prisma.IntWithAggregatesFilter<"AIModel"> | number
  isActive?: Prisma.BoolWithAggregatesFilter<"AIModel"> | boolean
  inputPrice?: Prisma.DecimalWithAggregatesFilter<"AIModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalWithAggregatesFilter<"AIModel"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AIModel"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AIModel"> | Date | string
}

export type AIModelCreateInput = {
  name: string
  providerId?: number
  isActive?: boolean
  inputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AIModelUncheckedCreateInput = {
  id?: number
  name: string
  providerId?: number
  isActive?: boolean
  inputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AIModelUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  inputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AIModelUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  inputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AIModelCreateManyInput = {
  id?: number
  name: string
  providerId?: number
  isActive?: boolean
  inputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice: runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AIModelUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  inputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AIModelUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  providerId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  inputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  outputPrice?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AIModelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AIModelAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
}

export type AIModelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AIModelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AIModelSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  providerId?: Prisma.SortOrder
  inputPrice?: Prisma.SortOrder
  outputPrice?: Prisma.SortOrder
}



export type AIModelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  providerId?: boolean
  isActive?: boolean
  inputPrice?: boolean
  outputPrice?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["aIModel"]>

export type AIModelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  providerId?: boolean
  isActive?: boolean
  inputPrice?: boolean
  outputPrice?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["aIModel"]>

export type AIModelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  providerId?: boolean
  isActive?: boolean
  inputPrice?: boolean
  outputPrice?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["aIModel"]>

export type AIModelSelectScalar = {
  id?: boolean
  name?: boolean
  providerId?: boolean
  isActive?: boolean
  inputPrice?: boolean
  outputPrice?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AIModelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "providerId" | "isActive" | "inputPrice" | "outputPrice" | "createdAt" | "updatedAt", ExtArgs["result"]["aIModel"]>

export type $AIModelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AIModel"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    providerId: number
    isActive: boolean
    inputPrice: runtime.Decimal
    outputPrice: runtime.Decimal
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["aIModel"]>
  composites: {}
}

export type AIModelGetPayload<S extends boolean | null | undefined | AIModelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AIModelPayload, S>

export type AIModelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AIModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AIModelCountAggregateInputType | true
  }

export interface AIModelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIModel'], meta: { name: 'AIModel' } }
  /**
   * Find zero or one AIModel that matches the filter.
   * @param {AIModelFindUniqueArgs} args - Arguments to find a AIModel
   * @example
   * // Get one AIModel
   * const aIModel = await prisma.aIModel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AIModelFindUniqueArgs>(args: Prisma.SelectSubset<T, AIModelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AIModelClient<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AIModel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AIModelFindUniqueOrThrowArgs} args - Arguments to find a AIModel
   * @example
   * // Get one AIModel
   * const aIModel = await prisma.aIModel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AIModelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AIModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AIModelClient<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AIModel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelFindFirstArgs} args - Arguments to find a AIModel
   * @example
   * // Get one AIModel
   * const aIModel = await prisma.aIModel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AIModelFindFirstArgs>(args?: Prisma.SelectSubset<T, AIModelFindFirstArgs<ExtArgs>>): Prisma.Prisma__AIModelClient<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AIModel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelFindFirstOrThrowArgs} args - Arguments to find a AIModel
   * @example
   * // Get one AIModel
   * const aIModel = await prisma.aIModel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AIModelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AIModelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AIModelClient<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AIModels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AIModels
   * const aIModels = await prisma.aIModel.findMany()
   * 
   * // Get first 10 AIModels
   * const aIModels = await prisma.aIModel.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const aIModelWithIdOnly = await prisma.aIModel.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AIModelFindManyArgs>(args?: Prisma.SelectSubset<T, AIModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AIModel.
   * @param {AIModelCreateArgs} args - Arguments to create a AIModel.
   * @example
   * // Create one AIModel
   * const AIModel = await prisma.aIModel.create({
   *   data: {
   *     // ... data to create a AIModel
   *   }
   * })
   * 
   */
  create<T extends AIModelCreateArgs>(args: Prisma.SelectSubset<T, AIModelCreateArgs<ExtArgs>>): Prisma.Prisma__AIModelClient<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AIModels.
   * @param {AIModelCreateManyArgs} args - Arguments to create many AIModels.
   * @example
   * // Create many AIModels
   * const aIModel = await prisma.aIModel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AIModelCreateManyArgs>(args?: Prisma.SelectSubset<T, AIModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AIModels and returns the data saved in the database.
   * @param {AIModelCreateManyAndReturnArgs} args - Arguments to create many AIModels.
   * @example
   * // Create many AIModels
   * const aIModel = await prisma.aIModel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AIModels and only return the `id`
   * const aIModelWithIdOnly = await prisma.aIModel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AIModelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AIModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AIModel.
   * @param {AIModelDeleteArgs} args - Arguments to delete one AIModel.
   * @example
   * // Delete one AIModel
   * const AIModel = await prisma.aIModel.delete({
   *   where: {
   *     // ... filter to delete one AIModel
   *   }
   * })
   * 
   */
  delete<T extends AIModelDeleteArgs>(args: Prisma.SelectSubset<T, AIModelDeleteArgs<ExtArgs>>): Prisma.Prisma__AIModelClient<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AIModel.
   * @param {AIModelUpdateArgs} args - Arguments to update one AIModel.
   * @example
   * // Update one AIModel
   * const aIModel = await prisma.aIModel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AIModelUpdateArgs>(args: Prisma.SelectSubset<T, AIModelUpdateArgs<ExtArgs>>): Prisma.Prisma__AIModelClient<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AIModels.
   * @param {AIModelDeleteManyArgs} args - Arguments to filter AIModels to delete.
   * @example
   * // Delete a few AIModels
   * const { count } = await prisma.aIModel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AIModelDeleteManyArgs>(args?: Prisma.SelectSubset<T, AIModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AIModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AIModels
   * const aIModel = await prisma.aIModel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AIModelUpdateManyArgs>(args: Prisma.SelectSubset<T, AIModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AIModels and returns the data updated in the database.
   * @param {AIModelUpdateManyAndReturnArgs} args - Arguments to update many AIModels.
   * @example
   * // Update many AIModels
   * const aIModel = await prisma.aIModel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AIModels and only return the `id`
   * const aIModelWithIdOnly = await prisma.aIModel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AIModelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AIModelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AIModel.
   * @param {AIModelUpsertArgs} args - Arguments to update or create a AIModel.
   * @example
   * // Update or create a AIModel
   * const aIModel = await prisma.aIModel.upsert({
   *   create: {
   *     // ... data to create a AIModel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AIModel we want to update
   *   }
   * })
   */
  upsert<T extends AIModelUpsertArgs>(args: Prisma.SelectSubset<T, AIModelUpsertArgs<ExtArgs>>): Prisma.Prisma__AIModelClient<runtime.Types.Result.GetResult<Prisma.$AIModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AIModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelCountArgs} args - Arguments to filter AIModels to count.
   * @example
   * // Count the number of AIModels
   * const count = await prisma.aIModel.count({
   *   where: {
   *     // ... the filter for the AIModels we want to count
   *   }
   * })
  **/
  count<T extends AIModelCountArgs>(
    args?: Prisma.Subset<T, AIModelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AIModelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AIModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AIModelAggregateArgs>(args: Prisma.Subset<T, AIModelAggregateArgs>): Prisma.PrismaPromise<GetAIModelAggregateType<T>>

  /**
   * Group by AIModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AIModelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AIModelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AIModelGroupByArgs['orderBy'] }
      : { orderBy?: AIModelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AIModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AIModel model
 */
readonly fields: AIModelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AIModel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AIModelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AIModel model
 */
export interface AIModelFieldRefs {
  readonly id: Prisma.FieldRef<"AIModel", 'Int'>
  readonly name: Prisma.FieldRef<"AIModel", 'String'>
  readonly providerId: Prisma.FieldRef<"AIModel", 'Int'>
  readonly isActive: Prisma.FieldRef<"AIModel", 'Boolean'>
  readonly inputPrice: Prisma.FieldRef<"AIModel", 'Decimal'>
  readonly outputPrice: Prisma.FieldRef<"AIModel", 'Decimal'>
  readonly createdAt: Prisma.FieldRef<"AIModel", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AIModel", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AIModel findUnique
 */
export type AIModelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * Filter, which AIModel to fetch.
   */
  where: Prisma.AIModelWhereUniqueInput
}

/**
 * AIModel findUniqueOrThrow
 */
export type AIModelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * Filter, which AIModel to fetch.
   */
  where: Prisma.AIModelWhereUniqueInput
}

/**
 * AIModel findFirst
 */
export type AIModelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * Filter, which AIModel to fetch.
   */
  where?: Prisma.AIModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AIModels to fetch.
   */
  orderBy?: Prisma.AIModelOrderByWithRelationInput | Prisma.AIModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AIModels.
   */
  cursor?: Prisma.AIModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AIModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AIModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AIModels.
   */
  distinct?: Prisma.AIModelScalarFieldEnum | Prisma.AIModelScalarFieldEnum[]
}

/**
 * AIModel findFirstOrThrow
 */
export type AIModelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * Filter, which AIModel to fetch.
   */
  where?: Prisma.AIModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AIModels to fetch.
   */
  orderBy?: Prisma.AIModelOrderByWithRelationInput | Prisma.AIModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AIModels.
   */
  cursor?: Prisma.AIModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AIModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AIModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AIModels.
   */
  distinct?: Prisma.AIModelScalarFieldEnum | Prisma.AIModelScalarFieldEnum[]
}

/**
 * AIModel findMany
 */
export type AIModelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * Filter, which AIModels to fetch.
   */
  where?: Prisma.AIModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AIModels to fetch.
   */
  orderBy?: Prisma.AIModelOrderByWithRelationInput | Prisma.AIModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AIModels.
   */
  cursor?: Prisma.AIModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AIModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AIModels.
   */
  skip?: number
  distinct?: Prisma.AIModelScalarFieldEnum | Prisma.AIModelScalarFieldEnum[]
}

/**
 * AIModel create
 */
export type AIModelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * The data needed to create a AIModel.
   */
  data: Prisma.XOR<Prisma.AIModelCreateInput, Prisma.AIModelUncheckedCreateInput>
}

/**
 * AIModel createMany
 */
export type AIModelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AIModels.
   */
  data: Prisma.AIModelCreateManyInput | Prisma.AIModelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AIModel createManyAndReturn
 */
export type AIModelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * The data used to create many AIModels.
   */
  data: Prisma.AIModelCreateManyInput | Prisma.AIModelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AIModel update
 */
export type AIModelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * The data needed to update a AIModel.
   */
  data: Prisma.XOR<Prisma.AIModelUpdateInput, Prisma.AIModelUncheckedUpdateInput>
  /**
   * Choose, which AIModel to update.
   */
  where: Prisma.AIModelWhereUniqueInput
}

/**
 * AIModel updateMany
 */
export type AIModelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AIModels.
   */
  data: Prisma.XOR<Prisma.AIModelUpdateManyMutationInput, Prisma.AIModelUncheckedUpdateManyInput>
  /**
   * Filter which AIModels to update
   */
  where?: Prisma.AIModelWhereInput
  /**
   * Limit how many AIModels to update.
   */
  limit?: number
}

/**
 * AIModel updateManyAndReturn
 */
export type AIModelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * The data used to update AIModels.
   */
  data: Prisma.XOR<Prisma.AIModelUpdateManyMutationInput, Prisma.AIModelUncheckedUpdateManyInput>
  /**
   * Filter which AIModels to update
   */
  where?: Prisma.AIModelWhereInput
  /**
   * Limit how many AIModels to update.
   */
  limit?: number
}

/**
 * AIModel upsert
 */
export type AIModelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * The filter to search for the AIModel to update in case it exists.
   */
  where: Prisma.AIModelWhereUniqueInput
  /**
   * In case the AIModel found by the `where` argument doesn't exist, create a new AIModel with this data.
   */
  create: Prisma.XOR<Prisma.AIModelCreateInput, Prisma.AIModelUncheckedCreateInput>
  /**
   * In case the AIModel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AIModelUpdateInput, Prisma.AIModelUncheckedUpdateInput>
}

/**
 * AIModel delete
 */
export type AIModelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
  /**
   * Filter which AIModel to delete.
   */
  where: Prisma.AIModelWhereUniqueInput
}

/**
 * AIModel deleteMany
 */
export type AIModelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AIModels to delete
   */
  where?: Prisma.AIModelWhereInput
  /**
   * Limit how many AIModels to delete.
   */
  limit?: number
}

/**
 * AIModel without action
 */
export type AIModelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AIModel
   */
  select?: Prisma.AIModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AIModel
   */
  omit?: Prisma.AIModelOmit<ExtArgs> | null
}
